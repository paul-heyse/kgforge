src.search_api.bm25_index
=========================

.. py:module:: src.search_api.bm25_index

.. autoapi-nested-parse::

   Provide utilities for module.

   .. rubric:: Notes

   This module exposes the primary interfaces for the package.

   .. seealso:: :py:obj:`search_api.bm25_index`

   ..
       !! processed by numpydoc !!






Module Contents
---------------

.. py:function:: toks(text)

   
   Return toks.

   :param text: Description for ``text``.
   :type text: str

   :returns: *List[str]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.bm25_index import toks
   >>> result = toks(...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.bm25_index`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:class:: BM25Doc

   
   Represent BM25Doc.
















   ..
       !! processed by numpydoc !!

   .. py:attribute:: chunk_id
      :type:  str


   .. py:attribute:: doc_id
      :type:  str


   .. py:attribute:: title
      :type:  str


   .. py:attribute:: section
      :type:  str


   .. py:attribute:: tf
      :type:  dict[str, float]


   .. py:attribute:: dl
      :type:  float


.. py:class:: BM25Index(k1 = 0.9, b = 0.4)

   
   Represent BM25Index.

   .. attribute:: None

      No public attributes documented.

   .. method:: __init__()

      Method description.

   .. method:: build_from_duckdb()

      Method description.

   .. method:: _build()

      Method description.

   .. method:: save()

      Method description.

   .. method:: load()

      Method description.

   .. method:: _idf()

      Method description.

   .. method:: search()

      Method description.

   .. method:: doc()

      Method description.

   .. rubric:: Examples

   >>> from search_api.bm25_index import BM25Index
   >>> result = BM25Index()
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.bm25_index`

   .. rubric:: Notes

   Document class invariants and lifecycle details here.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: k1
      :value: 0.9



   .. py:attribute:: b
      :value: 0.4



   .. py:attribute:: docs
      :type:  list[BM25Doc]
      :value: []



   .. py:attribute:: df
      :type:  dict[str, int]


   .. py:attribute:: N
      :value: 0



   .. py:attribute:: avgdl
      :value: 0.0



   .. py:method:: build_from_duckdb(db_path)
      :classmethod:


      
      Return build from duckdb.

      :param db_path: Description for ``db_path``.
      :type db_path: str

      :returns: *BM25Index* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.bm25_index import build_from_duckdb
      >>> result = build_from_duckdb(...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_api.bm25_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: _build(rows)

      
      Return build.

      :param rows: Description for ``rows``.
      :type rows: Iterable[tuple[str, str, str, str, str]]

      .. rubric:: Examples

      >>> from search_api.bm25_index import _build
      >>> _build(...)  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`search_api.bm25_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: save(path)

      
      Return save.

      :param path: Description for ``path``.
      :type path: str

      .. rubric:: Examples

      >>> from search_api.bm25_index import save
      >>> save(...)  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`search_api.bm25_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: load(path)
      :classmethod:


      
      Return load.

      :param path: Description for ``path``.
      :type path: str

      :returns: *BM25Index* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.bm25_index import load
      >>> result = load(...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_api.bm25_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: _idf(term)

      
      Return idf.

      :param term: Description for ``term``.
      :type term: str

      :returns: *float* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.bm25_index import _idf
      >>> result = _idf(...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_api.bm25_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: search(query, k = 10)

      
      Return search.

      :param query: Description for ``query``.
      :type query: str
      :param k: Description for ``k``.
      :type k: int, optional

      :returns: *List[Tuple[int, float]]* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.bm25_index import search
      >>> result = search(..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_api.bm25_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: doc(index)

      
      Return doc.

      :param index: Description for ``index``.
      :type index: int

      :returns: *BM25Doc* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.bm25_index import doc
      >>> result = doc(...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_api.bm25_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


