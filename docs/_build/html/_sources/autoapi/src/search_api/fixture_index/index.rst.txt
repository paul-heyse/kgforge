src.search_api.fixture_index
============================

.. py:module:: src.search_api.fixture_index

.. autoapi-nested-parse::

   Provide utilities for module.

   .. rubric:: Notes

   This module exposes the primary interfaces for the package.

   .. seealso:: :py:obj:`search_api.fixture_index`

   ..
       !! processed by numpydoc !!






Module Contents
---------------

.. py:function:: tokenize(text)

   
   Return tokenize.

   :param text: Description for ``text``.
   :type text: str

   :returns: *List[str]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.fixture_index import tokenize
   >>> result = tokenize(...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.fixture_index`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:class:: FixtureDoc

   
   Represent FixtureDoc.
















   ..
       !! processed by numpydoc !!

   .. py:attribute:: chunk_id
      :type:  str


   .. py:attribute:: doc_id
      :type:  str


   .. py:attribute:: title
      :type:  str


   .. py:attribute:: section
      :type:  str


   .. py:attribute:: text
      :type:  str


.. py:class:: FixtureIndex(root = '/data', db_path = '/data/catalog/catalog.duckdb')

   
   Represent FixtureIndex.

   .. attribute:: None

      No public attributes documented.

   .. method:: __init__()

      Method description.

   .. method:: _load_from_duckdb()

      Method description.

   .. method:: _build_lex()

      Method description.

   .. method:: search()

      Method description.

   .. method:: doc()

      Method description.

   .. rubric:: Examples

   >>> from search_api.fixture_index import FixtureIndex
   >>> result = FixtureIndex()
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.fixture_index`

   .. rubric:: Notes

   Document class invariants and lifecycle details here.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: root


   .. py:attribute:: db_path
      :value: '/data/catalog/catalog.duckdb'



   .. py:attribute:: docs
      :type:  list[FixtureDoc]
      :value: []



   .. py:attribute:: df
      :type:  dict[str, int]


   .. py:attribute:: tf
      :type:  list[dict[str, int]]
      :value: []



   .. py:method:: _load_from_duckdb()

      
      Return load from duckdb.

      .. rubric:: Examples

      >>> from search_api.fixture_index import _load_from_duckdb
      >>> _load_from_duckdb()  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`search_api.fixture_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: _build_lex()

      
      Return build lex.

      .. rubric:: Examples

      >>> from search_api.fixture_index import _build_lex
      >>> _build_lex()  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`search_api.fixture_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: search(query, k = 10)

      
      Return search.

      :param query: Description for ``query``.
      :type query: str
      :param k: Description for ``k``.
      :type k: int, optional

      :returns: *List[Tuple[int, float]]* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.fixture_index import search
      >>> result = search(..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_api.fixture_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: doc(index)

      
      Return doc.

      :param index: Description for ``index``.
      :type index: int

      :returns: *FixtureDoc* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.fixture_index import doc
      >>> result = doc(...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_api.fixture_index`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


