src.search_api.kg_mock
======================

.. py:module:: src.search_api.kg_mock

.. autoapi-nested-parse::

   Provide utilities for module.

   .. rubric:: Notes

   This module exposes the primary interfaces for the package.

   .. seealso:: :py:obj:`search_api.kg_mock`

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:function:: detect_query_concepts(query)

   
   Return detect query concepts.

   :param query: Description for ``query``.
   :type query: str

   :returns: *Set[str]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.kg_mock import detect_query_concepts
   >>> result = detect_query_concepts(...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.kg_mock`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: linked_concepts_for_text(text)

   
   Return linked concepts for text.

   :param text: Description for ``text``.
   :type text: str

   :returns: *List[str]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.kg_mock import linked_concepts_for_text
   >>> result = linked_concepts_for_text(...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.kg_mock`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: kg_boost(query_concepts, chunk_concepts, direct = 0.08, one_hop = 0.04)

   
   Return kg boost.

   :param query_concepts: Description for ``query_concepts``.
   :type query_concepts: List[str]
   :param chunk_concepts: Description for ``chunk_concepts``.
   :type chunk_concepts: List[str]
   :param direct: Description for ``direct``.
   :type direct: float, optional
   :param one_hop: Description for ``one_hop``.
   :type one_hop: float, optional

   :returns: *float* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.kg_mock import kg_boost
   >>> result = kg_boost(..., ..., ..., ...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.kg_mock`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

