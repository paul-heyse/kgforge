src.search_api.app
==================

.. py:module:: src.search_api.app

.. autoapi-nested-parse::

   Provide utilities for module.

   .. rubric:: Notes

   This module exposes the primary interfaces for the package.

   .. seealso:: :py:obj:`search_api.app`

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:function:: auth(authorization = Header(default=None))

   
   Return auth.

   :param authorization: Description for ``authorization``.
   :type authorization: str | None, optional

   :raises HTTPException: Raised when validation fails.

   .. rubric:: Examples

   >>> from search_api.app import auth
   >>> auth(...)  # doctest: +ELLIPSIS

   .. seealso:: :py:obj:`search_api.app`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: healthz()

   
   Return healthz.

   :returns: *Mapping[str, Any]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import healthz
   >>> result = healthz()
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.app`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: rrf_fuse(lists, k_rrf)

   
   Return rrf fuse.

   :param lists: Description for ``lists``.
   :type lists: List[List[Tuple[str, float]]]
   :param k_rrf: Description for ``k_rrf``.
   :type k_rrf: int

   :returns: *Mapping[str, float]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import rrf_fuse
   >>> result = rrf_fuse(..., ...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.app`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: apply_kg_boosts(cands, query, direct = 0.08, one_hop = 0.04)

   
   Return apply kg boosts.

   :param cands: Description for ``cands``.
   :type cands: Mapping[str, float]
   :param query: Description for ``query``.
   :type query: str
   :param direct: Description for ``direct``.
   :type direct: float, optional
   :param one_hop: Description for ``one_hop``.
   :type one_hop: float, optional

   :returns: *Mapping[str, float]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import apply_kg_boosts
   >>> result = apply_kg_boosts(..., ..., ..., ...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.app`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: search(req, _ = Depends(auth))

   
   Return search.

   :param req: Description for ``req``.
   :type req: SearchRequest
   :param _: Description for ``_``.
   :type _: None, optional

   :returns: *Mapping[str, Any]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import search
   >>> result = search(..., ...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.app`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: graph_concepts(body, _ = Depends(auth))

   
   Return graph concepts.

   :param body: Description for ``body``.
   :type body: Mapping[str, Any]
   :param _: Description for ``_``.
   :type _: None, optional

   :returns: *Mapping[str, Any]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import graph_concepts
   >>> result = graph_concepts(..., ...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_api.app`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

