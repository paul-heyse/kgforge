src.orchestration.fixture_flow
==============================

.. py:module:: src.orchestration.fixture_flow

.. autoapi-nested-parse::

   Module for orchestration.fixture_flow.

   NavMap:
   - NavMap: Structure describing a module navmap.
   - t_prepare_dirs: Create the directory layout consumed by subsequent fixture….
   - t_write_fixture_chunks: Write a minimal chunk parquet dataset for fixture usage.
   - t_write_fixture_dense: Write dense embedding vectors for the fixture chunk.
   - t_write_fixture_splade: Write SPLADE-style sparse vectors for the fixture chunk.
   - t_register_in_duckdb: Insert generated fixture runs and datasets into the DuckDB….
   - fixture_pipeline: Run the full fixture pipeline and register the generated….





Module Contents
---------------

.. py:function:: t_prepare_dirs(root)

   Create the directory layout consumed by subsequent fixture tasks.

   :param root: Base directory where fixture artefacts should be written.
   :type root: str

   :returns: A trivial acknowledgement used by downstream tasks.
   :rtype: dict[str, bool]


.. py:function:: t_write_fixture_chunks(chunks_root)

   Write a minimal chunk parquet dataset for fixture usage.


.. py:function:: t_write_fixture_dense(dense_root)

   Write dense embedding vectors for the fixture chunk.


.. py:function:: t_write_fixture_splade(sparse_root)

   Write SPLADE-style sparse vectors for the fixture chunk.


.. py:function:: t_register_in_duckdb(db_path, chunks_info, dense_info, sparse_info)

   Insert generated fixture runs and datasets into the DuckDB registry.


.. py:function:: fixture_pipeline(root = '/data', db_path = '/data/catalog/catalog.duckdb')

   Run the full fixture pipeline and register the generated artefacts.


