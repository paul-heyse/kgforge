src.orchestration.fixture_flow
==============================

.. py:module:: src.orchestration.fixture_flow

.. autoapi-nested-parse::

   Provide utilities for module.

   .. rubric:: Notes

   This module exposes the primary interfaces for the package.

   .. seealso:: :py:obj:`orchestration.fixture_flow`

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:function:: t_prepare_dirs(root)

   
   Return t prepare dirs.

   :param root: Description for ``root``.
   :type root: str

   :returns: *Mapping[str, bool]* -- Description of return value.

   .. rubric:: Examples

   >>> from orchestration.fixture_flow import t_prepare_dirs
   >>> result = t_prepare_dirs(...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`orchestration.fixture_flow`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: t_write_fixture_chunks(chunks_root)

   
   Return t write fixture chunks.

   :param chunks_root: Description for ``chunks_root``.
   :type chunks_root: str

   :returns: *Tuple[str, int]* -- Description of return value.

   .. rubric:: Examples

   >>> from orchestration.fixture_flow import t_write_fixture_chunks
   >>> result = t_write_fixture_chunks(...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`orchestration.fixture_flow`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: t_write_fixture_dense(dense_root)

   
   Return t write fixture dense.

   :param dense_root: Description for ``dense_root``.
   :type dense_root: str

   :returns: *Tuple[str, int]* -- Description of return value.

   .. rubric:: Examples

   >>> from orchestration.fixture_flow import t_write_fixture_dense
   >>> result = t_write_fixture_dense(...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`orchestration.fixture_flow`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: t_write_fixture_splade(sparse_root)

   
   Return t write fixture splade.

   :param sparse_root: Description for ``sparse_root``.
   :type sparse_root: str

   :returns: *Tuple[str, int]* -- Description of return value.

   .. rubric:: Examples

   >>> from orchestration.fixture_flow import t_write_fixture_splade
   >>> result = t_write_fixture_splade(...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`orchestration.fixture_flow`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: t_register_in_duckdb(db_path, chunks_info, dense_info, sparse_info)

   
   Return t register in duckdb.

   :param db_path: Description for ``db_path``.
   :type db_path: str
   :param chunks_info: Description for ``chunks_info``.
   :type chunks_info: Tuple[str, int]
   :param dense_info: Description for ``dense_info``.
   :type dense_info: Tuple[str, int]
   :param sparse_info: Description for ``sparse_info``.
   :type sparse_info: Tuple[str, int]

   :returns: *Mapping[str, List[str]]* -- Description of return value.

   .. rubric:: Examples

   >>> from orchestration.fixture_flow import t_register_in_duckdb
   >>> result = t_register_in_duckdb(..., ..., ..., ...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`orchestration.fixture_flow`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

.. py:function:: fixture_pipeline(root = '/data', db_path = '/data/catalog/catalog.duckdb')

   
   Return fixture pipeline.

   :param root: Description for ``root``.
   :type root: str, optional
   :param db_path: Description for ``db_path``.
   :type db_path: str, optional

   :returns: *Mapping[str, List[str]]* -- Description of return value.

   .. rubric:: Examples

   >>> from orchestration.fixture_flow import fixture_pipeline
   >>> result = fixture_pipeline(..., ...)
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`orchestration.fixture_flow`

   .. rubric:: Notes

   Provide usage considerations, constraints, or complexity notes.















   ..
       !! processed by numpydoc !!

