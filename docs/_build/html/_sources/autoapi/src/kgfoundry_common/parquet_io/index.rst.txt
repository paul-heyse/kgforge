src.kgfoundry_common.parquet_io
===============================

.. py:module:: src.kgfoundry_common.parquet_io

.. autoapi-nested-parse::

   Provide utilities for module.

   .. rubric:: Notes

   This module exposes the primary interfaces for the package.

   .. seealso:: :py:obj:`kgfoundry_common.parquet_io`

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:class:: ParquetVectorWriter(root)

   
   Represent ParquetVectorWriter.

   .. attribute:: None

      No public attributes documented.

   .. method:: dense_schema()

      Method description.

   .. method:: __init__()

      Method description.

   .. method:: write_dense()

      Method description.

   .. method:: splade_schema()

      Method description.

   .. method:: write_splade()

      Method description.

   .. rubric:: Examples

   >>> from kgfoundry_common.parquet_io import ParquetVectorWriter
   >>> result = ParquetVectorWriter()
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`kgfoundry_common.parquet_io`

   .. rubric:: Notes

   Document class invariants and lifecycle details here.















   ..
       !! processed by numpydoc !!

   .. py:method:: dense_schema(dim)
      :staticmethod:


      
      Return dense schema.

      :param dim: Description for ``dim``.
      :type dim: int

      :returns: *pa.schema* -- Description of return value.

      .. rubric:: Examples

      >>> from kgfoundry_common.parquet_io import dense_schema
      >>> result = dense_schema(...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`kgfoundry_common.parquet_io`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:attribute:: root


   .. py:method:: write_dense(model, run_id, dim, records, shard = 0)

      
      Return write dense.

      :param model: Description for ``model``.
      :type model: str
      :param run_id: Description for ``run_id``.
      :type run_id: str
      :param dim: Description for ``dim``.
      :type dim: int
      :param records: Description for ``records``.
      :type records: Iterable[Tuple[str, List[float], float]]
      :param shard: Description for ``shard``.
      :type shard: int, optional

      :returns: *str* -- Description of return value.

      .. rubric:: Examples

      >>> from kgfoundry_common.parquet_io import write_dense
      >>> result = write_dense(..., ..., ..., ..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`kgfoundry_common.parquet_io`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: splade_schema()
      :staticmethod:


      
      Return splade schema.

      :returns: *pa.schema* -- Description of return value.

      .. rubric:: Examples

      >>> from kgfoundry_common.parquet_io import splade_schema
      >>> result = splade_schema()
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`kgfoundry_common.parquet_io`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: write_splade(model, run_id, records, shard = 0)

      
      Return write splade.

      :param model: Description for ``model``.
      :type model: str
      :param run_id: Description for ``run_id``.
      :type run_id: str
      :param records: Description for ``records``.
      :type records: Iterable[Tuple[str, List[int], List[float]]]
      :param shard: Description for ``shard``.
      :type shard: int, optional

      :returns: *str* -- Description of return value.

      .. rubric:: Examples

      >>> from kgfoundry_common.parquet_io import write_splade
      >>> result = write_splade(..., ..., ..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`kgfoundry_common.parquet_io`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


.. py:class:: ParquetChunkWriter(root, model = 'docling_hybrid', run_id = 'dev')

   
   Represent ParquetChunkWriter.

   .. attribute:: None

      No public attributes documented.

   .. method:: chunk_schema()

      Method description.

   .. method:: __init__()

      Method description.

   .. method:: write()

      Method description.

   .. rubric:: Examples

   >>> from kgfoundry_common.parquet_io import ParquetChunkWriter
   >>> result = ParquetChunkWriter()
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`kgfoundry_common.parquet_io`

   .. rubric:: Notes

   Document class invariants and lifecycle details here.















   ..
       !! processed by numpydoc !!

   .. py:method:: chunk_schema()
      :staticmethod:


      
      Return chunk schema.

      :returns: *pa.schema* -- Description of return value.

      .. rubric:: Examples

      >>> from kgfoundry_common.parquet_io import chunk_schema
      >>> result = chunk_schema()
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`kgfoundry_common.parquet_io`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:attribute:: root


   .. py:method:: write(rows)

      
      Return write.

      :param rows: Description for ``rows``.
      :type rows: Iterable[dict[str, Any]]

      :returns: *str* -- Description of return value.

      .. rubric:: Examples

      >>> from kgfoundry_common.parquet_io import write
      >>> result = write(...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`kgfoundry_common.parquet_io`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


