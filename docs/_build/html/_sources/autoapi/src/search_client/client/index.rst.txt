src.search_client.client
========================

.. py:module:: src.search_client.client

.. autoapi-nested-parse::

   Provide utilities for module.

   .. rubric:: Notes

   This module exposes the primary interfaces for the package.

   .. seealso:: :py:obj:`search_client.client`

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:class:: KGFoundryClient(base_url = 'http://localhost:8080', api_key = None, timeout = 30.0, http = None)

   
   Represent KGFoundryClient.

   .. attribute:: None

      No public attributes documented.

   .. method:: __init__()

      Method description.

   .. method:: _headers()

      Method description.

   .. method:: healthz()

      Method description.

   .. method:: search()

      Method description.

   .. method:: concepts()

      Method description.

   .. rubric:: Examples

   >>> from search_client.client import KGFoundryClient
   >>> result = KGFoundryClient()
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`search_client.client`

   .. rubric:: Notes

   Document class invariants and lifecycle details here.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: base_url
      :value: ''



   .. py:attribute:: api_key
      :value: None



   .. py:attribute:: timeout
      :value: 30.0



   .. py:attribute:: _http
      :type:  _SupportsHttp


   .. py:method:: _headers()

      
      Return headers.

      :returns: *Mapping[str, str]* -- Description of return value.

      .. rubric:: Examples

      >>> from search_client.client import _headers
      >>> result = _headers()
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_client.client`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: healthz()

      
      Return healthz.

      :returns: *Mapping[str, Any]* -- Description of return value.

      .. rubric:: Examples

      >>> from search_client.client import healthz
      >>> result = healthz()
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_client.client`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: search(query, k = 10, filters = None, explain = False)

      
      Return search.

      :param query: Description for ``query``.
      :type query: str
      :param k: Description for ``k``.
      :type k: int, optional
      :param filters: Description for ``filters``.
      :type filters: Mapping[str, Any] | None, optional
      :param explain: Description for ``explain``.
      :type explain: bool, optional

      :returns: *Mapping[str, Any]* -- Description of return value.

      .. rubric:: Examples

      >>> from search_client.client import search
      >>> result = search(..., ..., ..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_client.client`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: concepts(q, limit = 50)

      
      Return concepts.

      :param q: Description for ``q``.
      :type q: str
      :param limit: Description for ``limit``.
      :type limit: int, optional

      :returns: *Mapping[str, Any]* -- Description of return value.

      .. rubric:: Examples

      >>> from search_client.client import concepts
      >>> result = concepts(..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`search_client.client`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


