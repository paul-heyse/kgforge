src.download.harvester
======================

.. py:module:: src.download.harvester

.. autoapi-nested-parse::

   Provide utilities for module.

   Auto-generated API documentation for the ``src.download.harvester`` module.

   .. rubric:: Notes

   This module exposes the primary interfaces for the package.

   .. seealso:: :py:obj:`src.download.harvester`

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:class:: OpenAccessHarvester(user_agent, contact_email, openalex_base = 'https://api.openalex.org', unpaywall_base = 'https://api.unpaywall.org', pdf_host_base = None, out_dir = '/data/pdfs')

   
   Represent OpenAccessHarvester.

   .. attribute:: None

      No public attributes documented.

   .. method:: __init__()

      Method description.

   .. method:: search()

      Method description.

   .. method:: resolve_pdf()

      Method description.

   .. method:: download_pdf()

      Method description.

   .. method:: run()

      Method description.

   .. rubric:: Examples

   >>> from download.harvester import OpenAccessHarvester
   >>> result = OpenAccessHarvester()
   >>> result  # doctest: +ELLIPSIS

   .. seealso:: :py:obj:`download.harvester`

   .. rubric:: Notes

   Document class invariants and lifecycle details here.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: ua


   .. py:attribute:: email


   .. py:attribute:: openalex
      :value: ''



   .. py:attribute:: unpaywall
      :value: ''



   .. py:attribute:: pdf_host
      :value: ''



   .. py:attribute:: out_dir
      :value: '/data/pdfs'



   .. py:attribute:: session


   .. py:method:: search(topic, years, max_works)

      
      Return search.

      :param topic: Description for ``topic``.
      :type topic: str
      :param years: Description for ``years``.
      :type years: str
      :param max_works: Description for ``max_works``.
      :type max_works: int

      :returns: *List[dict[str, Any]]* -- Description of return value.

      .. rubric:: Examples

      >>> from download.harvester import search
      >>> result = search(..., ..., ...)
      >>> result  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`download.harvester`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: resolve_pdf(work)

      
      Return resolve pdf.

      :param work: Description for ``work``.
      :type work: Mapping[str, Any]

      :returns: *str | None* -- Description of return value.

      .. rubric:: Examples

      >>> from download.harvester import resolve_pdf
      >>> result = resolve_pdf(...)
      >>> result  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`download.harvester`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: download_pdf(url, target_path)

      
      Return download pdf.

      :param url: Description for ``url``.
      :type url: str
      :param target_path: Description for ``target_path``.
      :type target_path: str

      :returns: *str* -- Description of return value.

      :raises DownloadError: Raised when validation fails.
      :raises UnsupportedMIMEError: Raised when validation fails.

      .. rubric:: Examples

      >>> from download.harvester import download_pdf
      >>> result = download_pdf(..., ...)
      >>> result  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`download.harvester`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: run(topic, years, max_works)

      
      Return run.

      :param topic: Description for ``topic``.
      :type topic: str
      :param years: Description for ``years``.
      :type years: str
      :param max_works: Description for ``max_works``.
      :type max_works: int

      :returns: *List[Doc]* -- Description of return value.

      .. rubric:: Examples

      >>> from download.harvester import run
      >>> result = run(..., ..., ...)
      >>> result  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`download.harvester`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


