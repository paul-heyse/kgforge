src.registry.duckdb_registry
============================

.. py:module:: src.registry.duckdb_registry

.. autoapi-nested-parse::

   Provide utilities for module.

   .. rubric:: Notes

   This module exposes the primary interfaces for the package.

   .. seealso:: :py:obj:`registry.duckdb_registry`

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:class:: DuckDBRegistry(db_path)

   
   Represent DuckDBRegistry.

   .. attribute:: None

      No public attributes documented.

   .. method:: __init__()

      Method description.

   .. method:: begin_dataset()

      Method description.

   .. method:: commit_dataset()

      Method description.

   .. method:: rollback_dataset()

      Method description.

   .. method:: insert_run()

      Method description.

   .. method:: close_run()

      Method description.

   .. method:: register_documents()

      Method description.

   .. method:: register_doctags()

      Method description.

   .. method:: emit_event()

      Method description.

   .. method:: incident()

      Method description.

   .. rubric:: Examples

   >>> from registry.duckdb_registry import DuckDBRegistry
   >>> result = DuckDBRegistry()
   >>> result  # doctest: +ELLIPSIS
   ...

   .. seealso:: :py:obj:`registry.duckdb_registry`

   .. rubric:: Notes

   Document class invariants and lifecycle details here.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: db_path


   .. py:attribute:: con


   .. py:method:: begin_dataset(kind, run_id)

      
      Return begin dataset.

      :param kind: Description for ``kind``.
      :type kind: str
      :param run_id: Description for ``run_id``.
      :type run_id: str

      :returns: *str* -- Description of return value.

      .. rubric:: Examples

      >>> from registry.duckdb_registry import begin_dataset
      >>> result = begin_dataset(..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`registry.duckdb_registry`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: commit_dataset(dataset_id, parquet_root, rows)

      
      Return commit dataset.

      :param dataset_id: Description for ``dataset_id``.
      :type dataset_id: str
      :param parquet_root: Description for ``parquet_root``.
      :type parquet_root: str
      :param rows: Description for ``rows``.
      :type rows: int

      .. rubric:: Examples

      >>> from registry.duckdb_registry import commit_dataset
      >>> commit_dataset(..., ..., ...)  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`registry.duckdb_registry`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: rollback_dataset(dataset_id)

      
      Return rollback dataset.

      :param dataset_id: Description for ``dataset_id``.
      :type dataset_id: str

      .. rubric:: Examples

      >>> from registry.duckdb_registry import rollback_dataset
      >>> rollback_dataset(...)  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`registry.duckdb_registry`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: insert_run(purpose, model_id, revision, config)

      
      Return insert run.

      :param purpose: Description for ``purpose``.
      :type purpose: str
      :param model_id: Description for ``model_id``.
      :type model_id: str | None
      :param revision: Description for ``revision``.
      :type revision: str | None
      :param config: Description for ``config``.
      :type config: Mapping[str, object]

      :returns: *str* -- Description of return value.

      .. rubric:: Examples

      >>> from registry.duckdb_registry import insert_run
      >>> result = insert_run(..., ..., ..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...

      .. seealso:: :py:obj:`registry.duckdb_registry`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: close_run(run_id, success, notes = None)

      
      Return close run.

      :param run_id: Description for ``run_id``.
      :type run_id: str
      :param success: Description for ``success``.
      :type success: bool
      :param notes: Description for ``notes``.
      :type notes: str | None, optional

      .. rubric:: Examples

      >>> from registry.duckdb_registry import close_run
      >>> close_run(..., ..., ...)  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`registry.duckdb_registry`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: register_documents(docs)

      
      Return register documents.

      :param docs: Description for ``docs``.
      :type docs: List[Doc]

      .. rubric:: Examples

      >>> from registry.duckdb_registry import register_documents
      >>> register_documents(...)  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`registry.duckdb_registry`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: register_doctags(assets)

      
      Return register doctags.

      :param assets: Description for ``assets``.
      :type assets: List[DoctagsAsset]

      .. rubric:: Examples

      >>> from registry.duckdb_registry import register_doctags
      >>> register_doctags(...)  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`registry.duckdb_registry`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: emit_event(event_name, subject_id, payload)

      
      Return emit event.

      :param event_name: Description for ``event_name``.
      :type event_name: str
      :param subject_id: Description for ``subject_id``.
      :type subject_id: str
      :param payload: Description for ``payload``.
      :type payload: Mapping[str, object]

      .. rubric:: Examples

      >>> from registry.duckdb_registry import emit_event
      >>> emit_event(..., ..., ...)  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`registry.duckdb_registry`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


   .. py:method:: incident(event, subject_id, error_class, message)

      
      Return incident.

      :param event: Description for ``event``.
      :type event: str
      :param subject_id: Description for ``subject_id``.
      :type subject_id: str
      :param error_class: Description for ``error_class``.
      :type error_class: str
      :param message: Description for ``message``.
      :type message: str

      .. rubric:: Examples

      >>> from registry.duckdb_registry import incident
      >>> incident(..., ..., ..., ...)  # doctest: +ELLIPSIS

      .. seealso:: :py:obj:`registry.duckdb_registry`

      .. rubric:: Notes

      Provide usage considerations, constraints, or complexity notes.















      ..
          !! processed by numpydoc !!


