src.search_api.bm25_index
=========================

.. py:module:: src.search_api.bm25_index

.. autoapi-nested-parse::

   Overview of bm25 index.

   This module bundles bm25 index logic for the kgfoundry stack. It groups related helpers so
   downstream packages can import a single cohesive namespace. Refer to the functions and classes below
   for implementation specifics.

   ..
       !! processed by numpydoc !!






Module Contents
---------------

.. py:function:: toks(text)


   Compute toks.

   Carry out the toks operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :param text: Description for ``text``.
   :type text: str

   :returns: *List[str]* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.bm25_index import toks
   >>> result = toks(...)
   >>> result  # doctest: +ELLIPSIS
   ...















   ..
       !! processed by numpydoc !!

.. py:class:: BM25Doc


   Model the BM25Doc.

   Represent the bm25doc data structure used throughout the project. The class encapsulates
   behaviour behind a well-defined interface for collaborating components. Instances are typically
   created by factories or runtime orchestrators documented nearby.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: chunk_id
      :type:  str


   .. py:attribute:: doc_id
      :type:  str


   .. py:attribute:: title
      :type:  str


   .. py:attribute:: section
      :type:  str


   .. py:attribute:: tf
      :type:  dict[str, float]


   .. py:attribute:: dl
      :type:  float


.. py:class:: BM25Index(k1 = 0.9, b = 0.4)


   Model the BM25Index.

   Represent the bm25index data structure used throughout the project. The class encapsulates
   behaviour behind a well-defined interface for collaborating components. Instances are typically
   created by factories or runtime orchestrators documented nearby.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: k1
      :value: 0.9



   .. py:attribute:: b
      :value: 0.4



   .. py:attribute:: docs
      :type:  list[BM25Doc]
      :value: []



   .. py:attribute:: df
      :type:  dict[str, int]


   .. py:attribute:: N
      :value: 0



   .. py:attribute:: avgdl
      :value: 0.0



   .. py:method:: build_from_duckdb(db_path)
      :classmethod:



      Compute build from duckdb.

      Carry out the build from duckdb operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param db_path: Description for ``db_path``.
      :type db_path: str

      :returns: *BM25Index* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.bm25_index import build_from_duckdb
      >>> result = build_from_duckdb(...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!


   .. py:method:: _build(rows)


      Compute build.

      Carry out the build operation.

      :param rows: Description for ``rows``.
      :type rows: Iterable[Tuple[str, str, str, str, str]]















      ..
          !! processed by numpydoc !!


   .. py:method:: from_parquet(path, *, k1 = 0.9, b = 0.4)
      :classmethod:



      Instantiate an index from a parquet dataset without DuckDB metadata.
















      ..
          !! processed by numpydoc !!


   .. py:method:: save(path)


      Compute save.

      Carry out the save operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param path: Description for ``path``.
      :type path: str

      .. rubric:: Examples

      >>> from search_api.bm25_index import save
      >>> save(...)  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: load(path)
      :classmethod:



      Compute load.

      Carry out the load operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param path: Description for ``path``.
      :type path: str

      :returns: *BM25Index* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.bm25_index import load
      >>> result = load(...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!


   .. py:method:: _idf(term)


      Compute idf.

      Carry out the idf operation.

      :param term: Description for ``term``.
      :type term: str

      :returns: *float* -- Description of return value.















      ..
          !! processed by numpydoc !!


   .. py:method:: search(query, k = 10)


      Compute search.

      Carry out the search operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param query: Description for ``query``.
      :type query: str
      :param k: Optional parameter default ``10``. Description for ``k``.
      :type k: int | None

      :returns: *List[Tuple[str, float]]* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.bm25_index import search
      >>> result = search(...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!


   .. py:method:: doc(index)


      Compute doc.

      Carry out the doc operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param index: Description for ``index``.
      :type index: int

      :returns: *BM25Doc* -- Description of return value.

      .. rubric:: Examples

      >>> from search_api.bm25_index import doc
      >>> result = doc(...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!
