src.search_api.app
==================

.. py:module:: src.search_api.app

.. autoapi-nested-parse::

   Module for search_api.app.

   NavMap:
   - NavMap: Structure describing a module navmap.
   - SearchRequest: Searchrequest.
   - SearchResult: Searchresult.
   - auth: Validate the bearer token supplied in the ``Authorization``….
   - healthz: Return a summary of dependency health for readiness checks.
   - rrf_fuse: Fuse ranked result lists using reciprocal rank fusion (RRF).
   - apply_kg_boosts: Apply knowledge-graph boosting heuristics to ranked….
   - search: Execute a search request across dense and sparse indices.
   - graph_concepts: Return KG concepts that match the provided query fragment.





Module Contents
---------------

.. py:function:: auth(authorization = Header(default=None))

   Validate the bearer token supplied in the ``Authorization`` header.

   :param authorization: Authorization header value in the form ``"Bearer <token>"``.
   :type authorization: str | None, optional

   :raises HTTPException: Raised when authentication is enabled and the token is invalid.


.. py:function:: healthz()

   Return a summary of dependency health for readiness checks.


.. py:function:: rrf_fuse(lists, k_rrf)

   Fuse ranked result lists using reciprocal rank fusion (RRF).

   :param lists: Ranked lists where each entry is a ``(document_id, score)`` pair.
   :type lists: list[list[tuple[str, float]]]
   :param k_rrf: Constant controlling how quickly contribution decays with rank.
   :type k_rrf: int

   :returns: Combined scores keyed by document identifier.
   :rtype: dict[str, float]


.. py:function:: apply_kg_boosts(cands, query, direct = 0.08, one_hop = 0.04)

   Apply knowledge-graph boosting heuristics to ranked candidates.

   :param cands: Baseline scores keyed by chunk identifier.
   :type cands: dict[str, float]
   :param query: Original search query used to infer concept mentions.
   :type query: str
   :param direct: Boost to apply when a chunk links directly to a concept in the query.
   :type direct: float, optional
   :param one_hop: Boost to apply when a chunk links to a neighbour of a concept.
   :type one_hop: float, optional

   :returns: Adjusted scores that include the knowledge-graph boosts.
   :rtype: dict[str, float]


.. py:function:: search(req, _ = Depends(auth))

   Execute a search request across dense and sparse indices.

   :param req: Request payload describing the query and ranking preferences.
   :type req: SearchRequest
   :param _: Dependency injection hook used to enforce authentication.
   :type _: None

   :returns: Serialized response containing the ranked search results.
   :rtype: dict[str, Any]


.. py:function:: graph_concepts(body, _ = Depends(auth))

   Return KG concepts that match the provided query fragment.

   :param body: Request payload optionally containing ``q`` and ``limit`` keys.
   :type body: Mapping[str, Any]
   :param _: Dependency injection hook used to enforce authentication.
   :type _: None

   :returns: Concepts whose identifiers match the provided fragment.
   :rtype: dict[str, Any]


