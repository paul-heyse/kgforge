from __future__ import annotations

from collections.abc import Iterable, Mapping, Sequence

from pandas import DataFrame

class DataType: ...

class Field:
    name: str
    type: DataType
    nullable: bool

class Schema:
    names: Sequence[str]

    def equals(self, other: Schema) -> bool: ...

class Table:
    schema: Schema

    @classmethod
    def from_pylist(
        cls,
        rows: Sequence[Mapping[str, object]] | Sequence[object],
        schema: Schema | None = ...,
    ) -> Table: ...
    def to_pandas(self) -> DataFrame: ...
    @property
    def num_rows(self) -> int: ...

def field(name: str, type: DataType, nullable: bool = ...) -> Field: ...  # noqa: A002 - public API uses `type`
def schema(
    fields: Iterable[Field] | Iterable[tuple[str, DataType]] | Mapping[str, DataType],
) -> Schema: ...
def list_(value_type: DataType, list_size: int | None = ...) -> DataType: ...
def dictionary(index_type: DataType, value_type: DataType) -> DataType: ...
def struct(
    fields: Iterable[Field] | Iterable[tuple[str, DataType]] | Mapping[str, DataType],
) -> DataType: ...
def string() -> DataType: ...
def int16() -> DataType: ...
def int32() -> DataType: ...
def float32() -> DataType: ...
def timestamp(unit: str, tz: str | None = ...) -> DataType: ...
