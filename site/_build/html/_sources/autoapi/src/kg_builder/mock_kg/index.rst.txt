src.kg_builder.mock_kg
======================

.. py:module:: src.kg_builder.mock_kg

.. autoapi-nested-parse::

   Overview of mock kg.

   This module bundles mock kg logic for the kgfoundry stack. It groups related helpers so downstream
   packages can import a single cohesive namespace. Refer to the functions and classes below for
   implementation specifics.

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:class:: MockKG


   Model the MockKG.

   Represent the mockkg data structure used throughout the project. The class encapsulates
   behaviour behind a well-defined interface for collaborating components. Instances are typically
   created by factories or runtime orchestrators documented nearby.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: chunk2concepts
      :type:  dict[str, set[str]]


   .. py:attribute:: neighbors
      :type:  dict[str, set[str]]


   .. py:method:: add_mention(chunk_id, concept_id)


      Compute add mention.

      Carry out the add mention operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param chunk_id: Description for ``chunk_id``.
      :type chunk_id: str
      :param concept_id: Description for ``concept_id``.
      :type concept_id: str

      .. rubric:: Examples

      >>> from kg_builder.mock_kg import add_mention
      >>> add_mention(..., ...)  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: add_edge(a, b)


      Compute add edge.

      Carry out the add edge operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param a: Description for ``a``.
      :type a: str
      :param b: Description for ``b``.
      :type b: str

      .. rubric:: Examples

      >>> from kg_builder.mock_kg import add_edge
      >>> add_edge(..., ...)  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: linked_concepts(chunk_id)


      Compute linked concepts.

      Carry out the linked concepts operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param chunk_id: Description for ``chunk_id``.
      :type chunk_id: str

      :returns: *List[str]* -- Description of return value.

      .. rubric:: Examples

      >>> from kg_builder.mock_kg import linked_concepts
      >>> result = linked_concepts(...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!


   .. py:method:: one_hop(concept_id)


      Compute one hop.

      Carry out the one hop operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param concept_id: Description for ``concept_id``.
      :type concept_id: str

      :returns: *List[str]* -- Description of return value.

      .. rubric:: Examples

      >>> from kg_builder.mock_kg import one_hop
      >>> result = one_hop(...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!
