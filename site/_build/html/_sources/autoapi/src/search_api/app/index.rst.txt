src.search_api.app
==================

.. py:module:: src.search_api.app

.. autoapi-nested-parse::

   Overview of app.

   This module bundles app logic for the kgfoundry stack. It groups related helpers so downstream
   packages can import a single cohesive namespace. Refer to the functions and classes below for
   implementation specifics.

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:function:: auth(authorization = Header(default=None))

   
   Compute auth.

   Carry out the auth operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :param authorization: Optional parameter default ``Header(default=None)``. Description for ``authorization``.
   :type authorization: str | None

   :raises HTTPException: Raised when validation fails.

   .. rubric:: Examples

   >>> from search_api.app import auth
   >>> auth()  # doctest: +ELLIPSIS















   ..
       !! processed by numpydoc !!

.. py:function:: healthz()

   
   Compute healthz.

   Carry out the healthz operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :returns: *collections.abc.Mapping* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import healthz
   >>> result = healthz()
   >>> result  # doctest: +ELLIPSIS
   ...















   ..
       !! processed by numpydoc !!

.. py:function:: rrf_fuse(lists, k_rrf)

   
   Compute rrf fuse.

   Carry out the rrf fuse operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :param lists: Description for ``lists``.
   :type lists: List[List[Tuple[str, float]]]
   :param k_rrf: Description for ``k_rrf``.
   :type k_rrf: int

   :returns: *collections.abc.Mapping* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import rrf_fuse
   >>> result = rrf_fuse(..., ...)
   >>> result  # doctest: +ELLIPSIS
   ...















   ..
       !! processed by numpydoc !!

.. py:function:: apply_kg_boosts(cands, query, direct = 0.08, one_hop = 0.04)

   
   Compute apply kg boosts.

   Carry out the apply kg boosts operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :param cands: Description for ``cands``.
   :type cands: collections.abc.Mapping
   :param query: Description for ``query``.
   :type query: str
   :param direct: Optional parameter default ``0.08``. Description for ``direct``.
   :type direct: float | None
   :param one_hop: Optional parameter default ``0.04``. Description for ``one_hop``.
   :type one_hop: float | None

   :returns: *collections.abc.Mapping* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import apply_kg_boosts
   >>> result = apply_kg_boosts(..., ...)
   >>> result  # doctest: +ELLIPSIS
   ...















   ..
       !! processed by numpydoc !!

.. py:function:: search(req, _ = Depends(auth))

   
   Compute search.

   Carry out the search operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :param req: Description for ``req``.
   :type req: src.search_api.schemas.SearchRequest
   :param _: Optional parameter default ``Depends(auth)``. Description for ``_``.
   :type _: None | None

   :returns: *collections.abc.Mapping* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import search
   >>> result = search(...)
   >>> result  # doctest: +ELLIPSIS
   ...















   ..
       !! processed by numpydoc !!

.. py:function:: graph_concepts(body, _ = Depends(auth))

   
   Compute graph concepts.

   Carry out the graph concepts operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :param body: Description for ``body``.
   :type body: collections.abc.Mapping
   :param _: Optional parameter default ``Depends(auth)``. Description for ``_``.
   :type _: None | None

   :returns: *collections.abc.Mapping* -- Description of return value.

   .. rubric:: Examples

   >>> from search_api.app import graph_concepts
   >>> result = graph_concepts(...)
   >>> result  # doctest: +ELLIPSIS
   ...















   ..
       !! processed by numpydoc !!

