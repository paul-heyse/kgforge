src.embeddings_sparse.splade
============================

.. py:module:: src.embeddings_sparse.splade

.. autoapi-nested-parse::

   Module for embeddings_sparse.splade.

   NavMap:
   - NavMap: Structure describing a module navmap.
   - SPLADEv3Encoder: Describe the SPLADE configuration used for neural encoding.
   - PureImpactIndex: Approximate SPLADE indexing with TF/IDF-style impactâ€¦.
   - LuceneImpactIndex: Bridge to a Pyserini SPLADE impact index stored on disk.
   - get_splade: Construct a SPLADE impact index for the requested backend.







Module Contents
---------------

.. py:class:: SPLADEv3Encoder(model_id = 'naver/splade-v3-distilbert', device = 'cuda', topk = 256, max_seq_len = 512)

   Describe the SPLADE configuration used for neural encoding.


   .. py:attribute:: name
      :value: 'SPLADE-v3-distilbert'



   .. py:attribute:: model_id
      :value: 'naver/splade-v3-distilbert'



   .. py:attribute:: device
      :value: 'cuda'



   .. py:attribute:: topk
      :value: 256



   .. py:attribute:: max_seq_len
      :value: 512



   .. py:method:: encode(texts)

      Generate sparse impact vectors for each input text.

      :param texts: Raw text segments to encode.
      :type texts: list[str]

      :returns: Pairs of token identifiers and weights describing the sparse vector.
      :rtype: list[tuple[list[int], list[float]]]

      :raises NotImplementedError: Always raised because the skeleton does not ship a neural encoder.



.. py:class:: PureImpactIndex(index_dir)

   Approximate SPLADE indexing with TF/IDF-style impact weighting.

   Keeps the retrieval path runnable without Pyserini or GPU resources by using a simple tokenizer
   and log-scaled weights.


   .. py:attribute:: index_dir


   .. py:attribute:: df
      :type:  dict[str, int]


   .. py:attribute:: N
      :value: 0



   .. py:attribute:: postings
      :type:  dict[str, dict[str, float]]


   .. py:method:: build(docs_iterable)

      Construct the impact index from an iterable of documents.



   .. py:method:: load()

      Load an existing impact index from disk.



   .. py:method:: search(query, k)

      Score documents with impact weights and return the top ``k`` hits.



.. py:class:: LuceneImpactIndex(index_dir)

   Bridge to a Pyserini SPLADE impact index stored on disk.


   .. py:attribute:: index_dir


   .. py:method:: search(query, k)

      Execute a SPLADE impact search against the Lucene index.



.. py:function:: get_splade(backend, index_dir)

   Construct a SPLADE impact index for the requested backend.


