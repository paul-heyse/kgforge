src.orchestration.fixture_flow
==============================

.. py:module:: src.orchestration.fixture_flow

.. autoapi-nested-parse::

   Module for orchestration.fixture_flow.

   NavMap:
   - t_prepare_dirs: T prepare dirs.
   - t_write_fixture_chunks: T write fixture chunks.
   - t_write_fixture_dense: T write fixture dense.
   - t_write_fixture_splade: T write fixture splade.
   - t_register_in_duckdb: T register in duckdb.
   - fixture_pipeline: Run the end-to-end fixture pipeline.





Module Contents
---------------

.. py:function:: t_prepare_dirs(root)

   T prepare dirs.

   :param root: TODO.
   :type root: str

   :returns: TODO.
   :rtype: dict


.. py:function:: t_write_fixture_chunks(chunks_root)

   T write fixture chunks.

   :param chunks_root: TODO.
   :type chunks_root: str

   :returns: TODO.
   :rtype: tuple[str, int]


.. py:function:: t_write_fixture_dense(dense_root)

   T write fixture dense.

   :param dense_root: TODO.
   :type dense_root: str

   :returns: TODO.
   :rtype: tuple[str, int]


.. py:function:: t_write_fixture_splade(sparse_root)

   T write fixture splade.

   :param sparse_root: TODO.
   :type sparse_root: str

   :returns: TODO.
   :rtype: tuple[str, int]


.. py:function:: t_register_in_duckdb(db_path, chunks_info, dense_info, sparse_info)

   T register in duckdb.

   :param db_path: TODO.
                   chunks_info: TODO.
                   dense_info: TODO.
                   sparse_info: TODO.
   :type db_path: str

   :returns: TODO.
   :rtype: dict


.. py:function:: fixture_pipeline(root = '/data', db_path = '/data/catalog/catalog.duckdb')

   Run the end-to-end fixture pipeline.

   :param root: TODO.
   :type root: str, default="/data"
   :param db_path: TODO.
   :type db_path: str, default="/data/catalog/catalog.duckdb"


