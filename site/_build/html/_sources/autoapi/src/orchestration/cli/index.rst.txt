src.orchestration.cli
=====================

.. py:module:: src.orchestration.cli

.. autoapi-nested-parse::

   Overview of cli.

   This module bundles cli logic for the kgfoundry stack. It groups related helpers so downstream
   packages can import a single cohesive namespace. Refer to the functions and classes below for
   implementation specifics.

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:function:: index_bm25(chunks_parquet = typer.Argument(..., help='Path to Parquet/JSONL with chunks'), backend = typer.Option('lucene', help='lucene|pure'), index_dir = typer.Option('./_indices/bm25', help='Output index directory'))

   
   Compute index bm25.

   Carry out the index bm25 operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :param chunks_parquet: Optional parameter default ``typer.Argument(..., help='Path to Parquet/JSONL with chunks')``. Description for ``chunks_parquet``.
   :type chunks_parquet: str | None
   :param backend: Optional parameter default ``typer.Option('lucene', help='lucene|pure')``. Description for ``backend``.
   :type backend: str | None
   :param index_dir: Optional parameter default ``typer.Option('./_indices/bm25', help='Output index directory')``. Description for ``index_dir``.
   :type index_dir: str | None

   .. rubric:: Examples

   >>> from orchestration.cli import index_bm25
   >>> index_bm25()  # doctest: +ELLIPSIS















   ..
       !! processed by numpydoc !!

.. py:function:: index_faiss(dense_vectors = typer.Argument(..., help='Path to dense vectors JSON (skeleton)'), index_path = typer.Option('./_indices/faiss/shard_000.idx', help='Output index (CPU .idx)'))

   
   Compute index faiss.

   Carry out the index faiss operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :param dense_vectors: Optional parameter default ``typer.Argument(..., help='Path to dense vectors JSON (skeleton)')``. Description for ``dense_vectors``.
   :type dense_vectors: str | None
   :param index_path: Optional parameter default ``typer.Option('./_indices/faiss/shard_000.idx', help='Output index (CPU .idx)')``. Description for ``index_path``.
   :type index_path: str | None

   .. rubric:: Examples

   >>> from orchestration.cli import index_faiss
   >>> index_faiss()  # doctest: +ELLIPSIS















   ..
       !! processed by numpydoc !!

.. py:function:: api(port = 8080)

   
   Compute api.

   Carry out the api operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :param port: Optional parameter default ``8080``. Description for ``port``.
   :type port: int | None

   .. rubric:: Examples

   >>> from orchestration.cli import api
   >>> api()  # doctest: +ELLIPSIS















   ..
       !! processed by numpydoc !!

.. py:function:: e2e()

   
   Compute e2e.

   Carry out the e2e operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

   :raises typer.Exit: Raised when validation fails.

   .. rubric:: Examples

   >>> from orchestration.cli import e2e
   >>> e2e()  # doctest: +ELLIPSIS















   ..
       !! processed by numpydoc !!

