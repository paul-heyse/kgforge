src.registry.helper
===================

.. py:module:: src.registry.helper

.. autoapi-nested-parse::

   Overview of helper.

   This module bundles helper logic for the kgfoundry stack. It groups related helpers so downstream
   packages can import a single cohesive namespace. Refer to the functions and classes below for
   implementation specifics.

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:class:: DuckDBRegistryHelper(db_path)

   
   Model the DuckDBRegistryHelper.

   Represent the duckdbregistryhelper data structure used throughout the project. The class
   encapsulates behaviour behind a well-defined interface for collaborating components. Instances
   are typically created by factories or runtime orchestrators documented nearby.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: db_path


   .. py:method:: _con()

      
      Compute con.

      Carry out the con operation.

      :returns: *duckdb.DuckDBPyConnection* -- Description of return value.















      ..
          !! processed by numpydoc !!


   .. py:method:: new_run(purpose, model_id, revision, config)

      
      Compute new run.

      Carry out the new run operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param purpose: Description for ``purpose``.
      :type purpose: str
      :param model_id: Description for ``model_id``.
      :type model_id: str | None
      :param revision: Description for ``revision``.
      :type revision: str | None
      :param config: Description for ``config``.
      :type config: collections.abc.Mapping

      :returns: *str* -- Description of return value.

      .. rubric:: Examples

      >>> from registry.helper import new_run
      >>> result = new_run(..., ..., ..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!


   .. py:method:: close_run(run_id, success, notes = None)

      
      Compute close run.

      Carry out the close run operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param run_id: Description for ``run_id``.
      :type run_id: str
      :param success: Description for ``success``.
      :type success: bool
      :param notes: Optional parameter default ``None``. Description for ``notes``.
      :type notes: str | None

      .. rubric:: Examples

      >>> from registry.helper import close_run
      >>> close_run(..., ...)  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: begin_dataset(kind, run_id)

      
      Compute begin dataset.

      Carry out the begin dataset operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param kind: Description for ``kind``.
      :type kind: str
      :param run_id: Description for ``run_id``.
      :type run_id: str

      :returns: *str* -- Description of return value.

      .. rubric:: Examples

      >>> from registry.helper import begin_dataset
      >>> result = begin_dataset(..., ...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!


   .. py:method:: commit_dataset(dataset_id, parquet_root, rows)

      
      Compute commit dataset.

      Carry out the commit dataset operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param dataset_id: Description for ``dataset_id``.
      :type dataset_id: str
      :param parquet_root: Description for ``parquet_root``.
      :type parquet_root: str
      :param rows: Description for ``rows``.
      :type rows: int

      .. rubric:: Examples

      >>> from registry.helper import commit_dataset
      >>> commit_dataset(..., ..., ...)  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: rollback_dataset(dataset_id)

      
      Compute rollback dataset.

      Carry out the rollback dataset operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param dataset_id: Description for ``dataset_id``.
      :type dataset_id: str

      .. rubric:: Examples

      >>> from registry.helper import rollback_dataset
      >>> rollback_dataset(...)  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: register_documents(docs)

      
      Compute register documents.

      Carry out the register documents operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param docs: Description for ``docs``.
      :type docs: List[src.kgfoundry_common.models.Doc]

      .. rubric:: Examples

      >>> from registry.helper import register_documents
      >>> register_documents(...)  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: register_doctags(assets)

      
      Compute register doctags.

      Carry out the register doctags operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param assets: Description for ``assets``.
      :type assets: List[src.kgfoundry_common.models.DoctagsAsset]

      .. rubric:: Examples

      >>> from registry.helper import register_doctags
      >>> register_doctags(...)  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: emit_event(event_name, subject_id, payload)

      
      Compute emit event.

      Carry out the emit event operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param event_name: Description for ``event_name``.
      :type event_name: str
      :param subject_id: Description for ``subject_id``.
      :type subject_id: str
      :param payload: Description for ``payload``.
      :type payload: collections.abc.Mapping

      .. rubric:: Examples

      >>> from registry.helper import emit_event
      >>> emit_event(..., ..., ...)  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


