{
  "commit": "ec4bc545b22c914e4be08ddaab1733734e94604c",
  "modules": {
    "kg_builder.mock_kg": {
      "path": "src/kg_builder/mock_kg.py",
      "exports": [
        "MockKG"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "MockKG"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "MockKG": 30
      },
      "links": {
        "source": "vscode://file/src/kg_builder/mock_kg.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Helpers for the MockKG in-memory knowledge graph",
      "see_also": [],
      "deps": []
    },
    "kg_builder": {
      "path": "src/kg_builder/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/kg_builder/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "kg_builder.neo4j_store": {
      "path": "src/kg_builder/neo4j_store.py",
      "exports": [
        "Neo4jStore"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "Neo4jStore"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "Neo4jStore": 30
      },
      "links": {
        "source": "vscode://file/src/kg_builder/neo4j_store.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Placeholder interface for a Neo4j-backed store",
      "see_also": [],
      "deps": []
    },
    "linking.linker": {
      "path": "src/linking/linker.py",
      "exports": [
        "Linker"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "Linker"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "Linker": 30
      },
      "links": {
        "source": "vscode://file/src/linking/linker.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for linking.linker",
      "see_also": [],
      "deps": []
    },
    "linking.calibration": {
      "path": "src/linking/calibration.py",
      "exports": [
        "isotonic_calibrate"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "isotonic_calibrate"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "isotonic_calibrate": 30
      },
      "links": {
        "source": "vscode://file/src/linking/calibration.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Placeholder calibration utilities for the linking package",
      "see_also": [],
      "deps": []
    },
    "linking": {
      "path": "src/linking/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/linking/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "kgfoundry": {
      "path": "src/kgfoundry/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/kgfoundry/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "embeddings_dense.base": {
      "path": "src/embeddings_dense/base.py",
      "exports": [
        "DenseEmbeddingModel"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "DenseEmbeddingModel"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "DenseEmbeddingModel": 34
      },
      "links": {
        "source": "vscode://file/src/embeddings_dense/base.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Protocols describing dense embedding providers",
      "see_also": [],
      "deps": []
    },
    "embeddings_dense.qwen3": {
      "path": "src/embeddings_dense/qwen3.py",
      "exports": [
        "Qwen3Embedder"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "Qwen3Embedder"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "Qwen3Embedder": 30
      },
      "links": {
        "source": "vscode://file/src/embeddings_dense/qwen3.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Qwen-3 dense embedding adapter",
      "see_also": [],
      "deps": []
    },
    "embeddings_dense": {
      "path": "src/embeddings_dense/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/embeddings_dense/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "orchestration.fixture_flow": {
      "path": "src/orchestration/fixture_flow.py",
      "exports": [
        "fixture_pipeline",
        "t_prepare_dirs",
        "t_register_in_duckdb",
        "t_write_fixture_chunks",
        "t_write_fixture_dense",
        "t_write_fixture_splade"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "t_prepare_dirs",
            "t_write_fixture_chunks",
            "t_write_fixture_dense",
            "t_write_fixture_splade",
            "t_register_in_duckdb",
            "fixture_pipeline"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "t_prepare_dirs": 55,
        "t_write_fixture_chunks": 78,
        "t_write_fixture_dense": 100,
        "t_write_fixture_splade": 112,
        "t_register_in_duckdb": 126,
        "fixture_pipeline": 172
      },
      "links": {
        "source": "vscode://file/src/orchestration/fixture_flow.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Prefect tasks that generate fixture parquet datasets and register them.",
      "see_also": [],
      "deps": []
    },
    "orchestration.cli": {
      "path": "src/orchestration/cli.py",
      "exports": [
        "api",
        "e2e",
        "index_bm25",
        "index_faiss"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "index_bm25",
            "index_faiss",
            "api",
            "e2e"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "index_bm25": 42,
        "index_faiss": 88,
        "api": 118,
        "e2e": 127
      },
      "links": {
        "source": "vscode://file/src/orchestration/cli.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for orchestration.cli",
      "see_also": [],
      "deps": []
    },
    "orchestration.flows": {
      "path": "src/orchestration/flows.py",
      "exports": [
        "e2e_flow",
        "t_echo"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "t_echo",
            "e2e_flow"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "t_echo": 33,
        "e2e_flow": 40
      },
      "links": {
        "source": "vscode://file/src/orchestration/flows.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Prefect orchestration flows used in kgfoundry demos",
      "see_also": [],
      "deps": []
    },
    "orchestration": {
      "path": "src/orchestration/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/orchestration/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "docling.vlm": {
      "path": "src/docling/vlm.py",
      "exports": [
        "GraniteDoclingVLM"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "GraniteDoclingVLM"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "GraniteDoclingVLM": 30
      },
      "links": {
        "source": "vscode://file/src/docling/vlm.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Vision-language tagging helpers for docling",
      "see_also": [],
      "deps": []
    },
    "docling.hybrid": {
      "path": "src/docling/hybrid.py",
      "exports": [
        "HybridChunker"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "HybridChunker"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "HybridChunker": 30
      },
      "links": {
        "source": "vscode://file/src/docling/hybrid.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Hybrid docling pipeline combining layout and text cues",
      "see_also": [],
      "deps": []
    },
    "docling.canonicalizer": {
      "path": "src/docling/canonicalizer.py",
      "exports": [
        "canonicalize_text"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "canonicalize_text"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "canonicalize_text": 32
      },
      "links": {
        "source": "vscode://file/src/docling/canonicalizer.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "String canonicalisation utilities for docling preprocessing",
      "see_also": [],
      "deps": []
    },
    "docling": {
      "path": "src/docling/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/docling/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "search_api.bm25_index": {
      "path": "src/search_api/bm25_index.py",
      "exports": [
        "BM25Doc",
        "BM25Index",
        "toks"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "toks",
            "BM25Doc",
            "BM25Index"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "toks": 42,
        "BM25Doc": 48,
        "BM25Index": 61
      },
      "links": {
        "source": "vscode://file/src/search_api/bm25_index.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Toy BM25 index backed by DuckDB parquet exports.",
      "see_also": [],
      "deps": []
    },
    "search_api.app": {
      "path": "src/search_api/app.py",
      "exports": [
        "apply_kg_boosts",
        "auth",
        "graph_concepts",
        "healthz",
        "rrf_fuse",
        "search"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "auth",
            "healthz",
            "rrf_fuse",
            "apply_kg_boosts",
            "search",
            "graph_concepts"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "auth": 121,
        "healthz": 144,
        "rrf_fuse": 160,
        "apply_kg_boosts": 183,
        "search": 227,
        "graph_concepts": 301
      },
      "links": {
        "source": "vscode://file/src/search_api/app.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Search service endpoints and helper utilities",
      "see_also": [],
      "deps": []
    },
    "search_api.schemas": {
      "path": "src/search_api/schemas.py",
      "exports": [
        "SearchRequest",
        "SearchResult"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "SearchRequest",
            "SearchResult"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "SearchRequest": 33,
        "SearchResult": 43
      },
      "links": {
        "source": "vscode://file/src/search_api/schemas.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for search_api.schemas",
      "see_also": [],
      "deps": []
    },
    "search_api.splade_index": {
      "path": "src/search_api/splade_index.py",
      "exports": [
        "SpladeDoc",
        "SpladeIndex",
        "tok"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "tok",
            "SpladeDoc",
            "SpladeIndex"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "tok": 39,
        "SpladeDoc": 45,
        "SpladeIndex": 56
      },
      "links": {
        "source": "vscode://file/src/search_api/splade_index.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Toy SPLADE-style sparse index for fixture search endpoints.",
      "see_also": [],
      "deps": []
    },
    "search_api.service": {
      "path": "src/search_api/service.py",
      "exports": [
        "apply_kg_boosts",
        "mmr_deduplicate",
        "rrf_fuse"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "rrf_fuse",
            "apply_kg_boosts",
            "mmr_deduplicate"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "rrf_fuse": 58,
        "apply_kg_boosts": 67,
        "mmr_deduplicate": 74
      },
      "links": {
        "source": "vscode://file/src/search_api/service.py"
      },
      "meta": {
        "rrf_fuse": {
          "since": "2024.10",
          "stability": "experimental",
          "side_effects": [
            "none"
          ],
          "thread_safety": "reentrant",
          "async_ok": true
        },
        "apply_kg_boosts": {
          "since": "2024.10",
          "stability": "experimental",
          "side_effects": [
            "none"
          ],
          "thread_safety": "reentrant",
          "async_ok": true
        },
        "mmr_deduplicate": {
          "since": "2024.10",
          "stability": "experimental",
          "side_effects": [
            "none"
          ],
          "thread_safety": "reentrant",
          "async_ok": true
        }
      },
      "tags": [
        "search",
        "ranking"
      ],
      "synopsis": "Ranking utilities composing the kgfoundry search pipeline",
      "see_also": [],
      "deps": []
    },
    "search_api.kg_mock": {
      "path": "src/search_api/kg_mock.py",
      "exports": [
        "detect_query_concepts",
        "kg_boost",
        "linked_concepts_for_text"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "detect_query_concepts",
            "linked_concepts_for_text",
            "kg_boost"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "detect_query_concepts": 52,
        "linked_concepts_for_text": 63,
        "kg_boost": 74
      },
      "links": {
        "source": "vscode://file/src/search_api/kg_mock.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Mock KG helpers for search API demos",
      "see_also": [],
      "deps": []
    },
    "search_api.fusion": {
      "path": "src/search_api/fusion.py",
      "exports": [
        "rrf_fuse"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "rrf_fuse"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "rrf_fuse": 30
      },
      "links": {
        "source": "vscode://file/src/search_api/fusion.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Reciprocal rank fusion helpers used by the search API",
      "see_also": [],
      "deps": []
    },
    "search_api.faiss_adapter": {
      "path": "src/search_api/faiss_adapter.py",
      "exports": [
        "DenseVecs",
        "FaissAdapter"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "DenseVecs",
            "FaissAdapter"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "DenseVecs": 55,
        "FaissAdapter": 64
      },
      "links": {
        "source": "vscode://file/src/search_api/faiss_adapter.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Dense retrieval utilities that wrap FAISS with DuckDB persistence.",
      "see_also": [],
      "deps": []
    },
    "search_api": {
      "path": "src/search_api/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/search_api/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "search_api.fixture_index": {
      "path": "src/search_api/fixture_index.py",
      "exports": [
        "FixtureDoc",
        "FixtureIndex",
        "tokenize"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "tokenize",
            "FixtureDoc",
            "FixtureIndex"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "tokenize": 40,
        "FixtureDoc": 46,
        "FixtureIndex": 58
      },
      "links": {
        "source": "vscode://file/src/search_api/fixture_index.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Tiny lexical index backed by DuckDB parquet fixtures.",
      "see_also": [],
      "deps": []
    },
    "ontology.loader": {
      "path": "src/ontology/loader.py",
      "exports": [
        "OntologyLoader"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "OntologyLoader"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "OntologyLoader": 30
      },
      "links": {
        "source": "vscode://file/src/ontology/loader.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for ontology.loader",
      "see_also": [],
      "deps": []
    },
    "ontology.catalog": {
      "path": "src/ontology/catalog.py",
      "exports": [
        "OntologyCatalog"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "OntologyCatalog"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "OntologyCatalog": 32
      },
      "links": {
        "source": "vscode://file/src/ontology/catalog.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Utility catalogue for lightweight ontology lookups.",
      "see_also": [],
      "deps": []
    },
    "ontology": {
      "path": "src/ontology/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/ontology/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "observability.metrics": {
      "path": "src/observability/metrics.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/observability/metrics.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "observability": {
      "path": "src/observability/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/observability/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "embeddings_sparse.base": {
      "path": "src/embeddings_sparse/base.py",
      "exports": [
        "SparseEncoder",
        "SparseIndex"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "SparseEncoder",
            "SparseIndex"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "SparseEncoder": 32,
        "SparseIndex": 43
      },
      "links": {
        "source": "vscode://file/src/embeddings_sparse/base.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for embeddings_sparse.base",
      "see_also": [],
      "deps": []
    },
    "embeddings_sparse.splade": {
      "path": "src/embeddings_sparse/splade.py",
      "exports": [
        "LuceneImpactIndex",
        "PureImpactIndex",
        "SPLADEv3Encoder",
        "get_splade"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "SPLADEv3Encoder",
            "PureImpactIndex",
            "LuceneImpactIndex",
            "get_splade"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "SPLADEv3Encoder": 46,
        "PureImpactIndex": 102,
        "LuceneImpactIndex": 175,
        "get_splade": 205
      },
      "links": {
        "source": "vscode://file/src/embeddings_sparse/splade.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "SPLADE sparse embedding helpers",
      "see_also": [],
      "deps": []
    },
    "embeddings_sparse.bm25": {
      "path": "src/embeddings_sparse/bm25.py",
      "exports": [
        "BM25Doc",
        "LuceneBM25",
        "PurePythonBM25",
        "get_bm25"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "BM25Doc",
            "PurePythonBM25",
            "LuceneBM25",
            "get_bm25"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "BM25Doc": 71,
        "PurePythonBM25": 81,
        "LuceneBM25": 199,
        "get_bm25": 264
      },
      "links": {
        "source": "vscode://file/src/embeddings_sparse/bm25.py"
      },
      "meta": {
        "PurePythonBM25": {
          "since": "2024.10",
          "stability": "experimental",
          "side_effects": [
            "fs"
          ],
          "thread_safety": "not-threadsafe",
          "async_ok": false,
          "tests": [
            "tests/unit/test_bm25_adapter.py::test_bm25_build_and_search_from_fixtures"
          ]
        },
        "LuceneBM25": {
          "since": "2024.10",
          "stability": "experimental",
          "side_effects": [
            "fs"
          ],
          "thread_safety": "not-threadsafe",
          "async_ok": false
        },
        "get_bm25": {
          "since": "2024.10",
          "stability": "stable",
          "side_effects": [
            "none"
          ],
          "thread_safety": "not-threadsafe",
          "async_ok": false
        }
      },
      "tags": [
        "bm25",
        "retrieval",
        "sparse"
      ],
      "synopsis": "Pure Python and Lucene-backed BM25 adapters for sparse retrieval",
      "see_also": [
        "kgfoundry.search_api.bm25_index"
      ],
      "deps": [
        "pyserini"
      ]
    },
    "embeddings_sparse": {
      "path": "src/embeddings_sparse/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/embeddings_sparse/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "vectorstore_faiss.gpu": {
      "path": "src/vectorstore_faiss/gpu.py",
      "exports": [
        "FaissGpuIndex"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "FaissGpuIndex"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "FaissGpuIndex": 38
      },
      "links": {
        "source": "vscode://file/src/vectorstore_faiss/gpu.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "FAISS index wrapper with optional cuVS acceleration and numpy fallback.",
      "see_also": [],
      "deps": []
    },
    "vectorstore_faiss": {
      "path": "src/vectorstore_faiss/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/vectorstore_faiss/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "registry.duckdb_registry": {
      "path": "src/registry/duckdb_registry.py",
      "exports": [
        "DuckDBRegistry"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "DuckDBRegistry"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "DuckDBRegistry": 36
      },
      "links": {
        "source": "vscode://file/src/registry/duckdb_registry.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Minimal registry wrapper storing pipeline artefacts in DuckDB.",
      "see_also": [],
      "deps": []
    },
    "registry.api": {
      "path": "src/registry/api.py",
      "exports": [
        "Registry"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "Registry"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "Registry": 33
      },
      "links": {
        "source": "vscode://file/src/registry/api.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for registry.api",
      "see_also": [],
      "deps": []
    },
    "registry.helper": {
      "path": "src/registry/helper.py",
      "exports": [
        "DuckDBRegistryHelper"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "DuckDBRegistryHelper"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "DuckDBRegistryHelper": 36
      },
      "links": {
        "source": "vscode://file/src/registry/helper.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Helper utilities that simplify writing records into the DuckDB registry.",
      "see_also": [],
      "deps": []
    },
    "registry": {
      "path": "src/registry/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/registry/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "registry.migrate": {
      "path": "src/registry/migrate.py",
      "exports": [
        "apply",
        "main"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "apply",
            "main"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "apply": 35,
        "main": 52
      },
      "links": {
        "source": "vscode://file/src/registry/migrate.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for registry.migrate",
      "see_also": [],
      "deps": []
    },
    "search_client.client": {
      "path": "src/search_client/client.py",
      "exports": [
        "KGFoundryClient"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "KGFoundryClient"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "KGFoundryClient": 59
      },
      "links": {
        "source": "vscode://file/src/search_client/client.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Client SDK for interacting with the kgfoundry search API",
      "see_also": [],
      "deps": []
    },
    "search_client": {
      "path": "src/search_client/__init__.py",
      "exports": [
        "KGFoundryClient"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "KGFoundryClient"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "KGFoundryClient": 26
      },
      "links": {
        "source": "vscode://file/src/search_client/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for search_client",
      "see_also": [],
      "deps": []
    },
    "download.cli": {
      "path": "src/download/cli.py",
      "exports": [
        "harvest"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "harvest"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "harvest": 34
      },
      "links": {
        "source": "vscode://file/src/download/cli.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for download.cli",
      "see_also": [],
      "deps": []
    },
    "download.harvester": {
      "path": "src/download/harvester.py",
      "exports": [
        "OpenAccessHarvester"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "OpenAccessHarvester"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "OpenAccessHarvester": 40
      },
      "links": {
        "source": "vscode://file/src/download/harvester.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Utilities for harvesting open-access PDFs from OpenAlex.",
      "see_also": [],
      "deps": []
    },
    "download": {
      "path": "src/download/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/download/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "kgfoundry_common.parquet_io": {
      "path": "src/kgfoundry_common/parquet_io.py",
      "exports": [
        "ParquetChunkWriter",
        "ParquetVectorWriter"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "ParquetVectorWriter",
            "ParquetChunkWriter"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "ParquetVectorWriter": 40,
        "ParquetChunkWriter": 199
      },
      "links": {
        "source": "vscode://file/src/kgfoundry_common/parquet_io.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Utilities for writing embedding vectors and chunks to Parquet",
      "see_also": [],
      "deps": []
    },
    "kgfoundry_common.models": {
      "path": "src/kgfoundry_common/models.py",
      "exports": [
        "Chunk",
        "Doc",
        "DoctagsAsset",
        "LinkAssertion"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "Doc",
            "DoctagsAsset",
            "Chunk",
            "LinkAssertion"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "Doc": 37,
        "DoctagsAsset": 56,
        "Chunk": 68,
        "LinkAssertion": 81
      },
      "links": {
        "source": "vscode://file/src/kgfoundry_common/models.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Module for kgfoundry_common.models",
      "see_also": [],
      "deps": []
    },
    "kgfoundry_common.config": {
      "path": "src/kgfoundry_common/config.py",
      "exports": [
        "load_config"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "load_config"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "load_config": 32
      },
      "links": {
        "source": "vscode://file/src/kgfoundry_common/config.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Configuration helpers shared across kgfoundry",
      "see_also": [],
      "deps": []
    },
    "kgfoundry_common.ids": {
      "path": "src/kgfoundry_common/ids.py",
      "exports": [
        "urn_chunk",
        "urn_doc_from_text"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "urn_doc_from_text",
            "urn_chunk"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "urn_doc_from_text": 33,
        "urn_chunk": 52
      },
      "links": {
        "source": "vscode://file/src/kgfoundry_common/ids.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Helpers for generating deterministic URNs",
      "see_also": [],
      "deps": []
    },
    "kgfoundry_common.logging": {
      "path": "src/kgfoundry_common/logging.py",
      "exports": [
        "JsonFormatter",
        "setup_logging"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "JsonFormatter",
            "setup_logging"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "JsonFormatter": 34,
        "setup_logging": 53
      },
      "links": {
        "source": "vscode://file/src/kgfoundry_common/logging.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Structured logging helpers shared across kgfoundry",
      "see_also": [],
      "deps": []
    },
    "kgfoundry_common.navmap_types": {
      "path": "src/kgfoundry_common/navmap_types.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/kgfoundry_common/navmap_types.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "kgfoundry_common.errors": {
      "path": "src/kgfoundry_common/errors.py",
      "exports": [
        "ChunkingError",
        "DoclingError",
        "DownloadError",
        "EmbeddingError",
        "IndexBuildError",
        "LinkerCalibrationError",
        "Neo4jError",
        "OCRTimeoutError",
        "OntologyParseError",
        "SpladeOOMError",
        "UnsupportedMIMEError"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "DownloadError",
            "UnsupportedMIMEError",
            "DoclingError",
            "OCRTimeoutError",
            "ChunkingError",
            "EmbeddingError",
            "SpladeOOMError",
            "IndexBuildError",
            "OntologyParseError",
            "LinkerCalibrationError",
            "Neo4jError"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "DownloadError": 64,
        "UnsupportedMIMEError": 71,
        "DoclingError": 78,
        "OCRTimeoutError": 85,
        "ChunkingError": 92,
        "EmbeddingError": 99,
        "SpladeOOMError": 106,
        "IndexBuildError": 113,
        "OntologyParseError": 120,
        "LinkerCalibrationError": 127,
        "Neo4jError": 134
      },
      "links": {
        "source": "vscode://file/src/kgfoundry_common/errors.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Common error types shared across kgfoundry",
      "see_also": [],
      "deps": []
    },
    "kgfoundry_common": {
      "path": "src/kgfoundry_common/__init__.py",
      "exports": [],
      "sections": [],
      "section_lines": {},
      "anchors": {},
      "links": {
        "source": "vscode://file/src/kgfoundry_common/__init__.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "",
      "see_also": [],
      "deps": []
    },
    "kgfoundry_common.exceptions": {
      "path": "src/kgfoundry_common/exceptions.py",
      "exports": [
        "DownloadError",
        "UnsupportedMIMEError"
      ],
      "sections": [
        {
          "id": "public-api",
          "title": "Public API",
          "symbols": [
            "DownloadError",
            "UnsupportedMIMEError"
          ]
        }
      ],
      "section_lines": {},
      "anchors": {
        "DownloadError": 31,
        "UnsupportedMIMEError": 38
      },
      "links": {
        "source": "vscode://file/src/kgfoundry_common/exceptions.py"
      },
      "meta": {},
      "tags": [],
      "synopsis": "Legacy exception aliases maintained for backwards compatibility",
      "see_also": [],
      "deps": []
    }
  }
}