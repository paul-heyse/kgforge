src.search_client.client
========================

.. py:module:: src.search_client.client

.. autoapi-nested-parse::

   Overview of client.

   This module bundles client logic for the kgfoundry stack. It groups related helpers so downstream
   packages can import a single cohesive namespace. Refer to the functions and classes below for
   implementation specifics.

   ..
       !! processed by numpydoc !!




Module Contents
---------------

.. py:class:: KGFoundryClient(base_url = 'http://localhost:8080', api_key = None, timeout = 30.0, http = None)


   Model the KGFoundryClient.

   Represent the kgfoundryclient data structure used throughout the project. The class encapsulates
   behaviour behind a well-defined interface for collaborating components. Instances are typically
   created by factories or runtime orchestrators documented nearby.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: base_url
      :value: ''



   .. py:attribute:: api_key
      :value: None



   .. py:attribute:: timeout
      :value: 30.0



   .. py:attribute:: _http
      :type:  SupportsHttp


   .. py:method:: _headers()


      Compute headers.

      Carry out the headers operation.

      :returns: *Mapping[str, str]* -- Description of return value.















      ..
          !! processed by numpydoc !!


   .. py:method:: healthz()


      Compute healthz.

      Carry out the healthz operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :returns: *collections.abc.Mapping* -- Description of return value.

      .. rubric:: Examples

      >>> from search_client.client import healthz
      >>> result = healthz()
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!


   .. py:method:: search(query, k = 10, filters = None, explain = False)


      Compute search.

      Carry out the search operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param query: Description for ``query``.
      :type query: str
      :param k: Optional parameter default ``10``. Description for ``k``.
      :type k: int | None
      :param filters: Optional parameter default ``None``. Description for ``filters``.
      :type filters: Mapping[str, Any] | None
      :param explain: Optional parameter default ``False``. Description for ``explain``.
      :type explain: bool | None

      :returns: *collections.abc.Mapping* -- Description of return value.

      .. rubric:: Examples

      >>> from search_client.client import search
      >>> result = search(...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!


   .. py:method:: concepts(q, limit = 50)


      Compute concepts.

      Carry out the concepts operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param q: Description for ``q``.
      :type q: str
      :param limit: Optional parameter default ``50``. Description for ``limit``.
      :type limit: int | None

      :returns: *collections.abc.Mapping* -- Description of return value.

      .. rubric:: Examples

      >>> from search_client.client import concepts
      >>> result = concepts(...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!
