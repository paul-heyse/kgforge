src.search_api.faiss_adapter
============================

.. py:module:: src.search_api.faiss_adapter

.. autoapi-nested-parse::

   Overview of faiss adapter.

   This module bundles faiss adapter logic for the kgfoundry stack. It groups related helpers so
   downstream packages can import a single cohesive namespace. Refer to the functions and classes below
   for implementation specifics.

   ..
       !! processed by numpydoc !!






Module Contents
---------------

.. py:type:: VecArray
   :canonical: NDArray[np.float32]


.. py:class:: DenseVecs

   
   Model the DenseVecs.

   Represent the densevecs data structure used throughout the project. The class encapsulates
   behaviour behind a well-defined interface for collaborating components. Instances are typically
   created by factories or runtime orchestrators documented nearby.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: ids
      :type:  list[str]


   .. py:attribute:: mat
      :type:  VecArray


.. py:class:: FaissAdapter(db_path, factory = 'OPQ64,IVF8192,PQ64', metric = 'ip')

   
   Model the FaissAdapter.

   Represent the faissadapter data structure used throughout the project. The class encapsulates
   behaviour behind a well-defined interface for collaborating components. Instances are typically
   created by factories or runtime orchestrators documented nearby.















   ..
       !! processed by numpydoc !!

   .. py:attribute:: db_path


   .. py:attribute:: factory
      :value: 'OPQ64,IVF8192,PQ64'



   .. py:attribute:: metric
      :value: 'ip'



   .. py:attribute:: index
      :type:  Any | None
      :value: None



   .. py:attribute:: idmap
      :type:  list[str] | None
      :value: None



   .. py:attribute:: vecs
      :type:  DenseVecs | None
      :value: None



   .. py:method:: _load_dense_from_parquet(source)

      
      Load dense vectors directly from a parquet dataset.
















      ..
          !! processed by numpydoc !!


   .. py:method:: _load_dense_parquet()

      
      Compute load dense parquet.

      Carry out the load dense parquet operation.

      :returns: *DenseVecs* -- Description of return value.

      :raises RuntimeError: Raised when validation fails.















      ..
          !! processed by numpydoc !!


   .. py:method:: build()

      
      Compute build.

      Carry out the build operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      .. rubric:: Examples

      >>> from search_api.faiss_adapter import build
      >>> build()  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: load_or_build(cpu_index_path = None)

      
      Compute load or build.

      Carry out the load or build operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param cpu_index_path: Optional parameter default ``None``. Description for ``cpu_index_path``.
      :type cpu_index_path: str | None

      .. rubric:: Examples

      >>> from search_api.faiss_adapter import load_or_build
      >>> load_or_build()  # doctest: +ELLIPSIS















      ..
          !! processed by numpydoc !!


   .. py:method:: search(qvec, k = 10)

      
      Compute search.

      Carry out the search operation for the surrounding component. Generated documentation highlights how this helper collaborates with neighbouring utilities. Callers rely on the routine to remain stable across releases.

      :param qvec: Description for ``qvec``.
      :type qvec: src.search_api.faiss_adapter.VecArray
      :param k: Optional parameter default ``10``. Description for ``k``.
      :type k: int | None

      :returns: *List[List[Tuple[str, float]]]* -- Description of return value.

      :raises RuntimeError: Raised when validation fails.

      .. rubric:: Examples

      >>> from search_api.faiss_adapter import search
      >>> result = search(...)
      >>> result  # doctest: +ELLIPSIS
      ...















      ..
          !! processed by numpydoc !!


