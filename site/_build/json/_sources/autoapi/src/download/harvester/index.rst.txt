src.download.harvester
======================

.. py:module:: src.download.harvester

.. autoapi-nested-parse::

   Module for download.harvester.

   NavMap:
   - DownloadError: Raised when an external download fails.
   - UnsupportedMIMEError: Raised when an unsupported MIME type is encountered.
   - NavMap: Structure describing a module navmap.
   - OpenAccessHarvester: Coordinate OpenAlex and Unpaywall lookups to persist open-â€¦.





Module Contents
---------------

.. py:class:: OpenAccessHarvester(user_agent, contact_email, openalex_base = 'https://api.openalex.org', unpaywall_base = 'https://api.unpaywall.org', pdf_host_base = None, out_dir = '/data/pdfs')

   Coordinate OpenAlex and Unpaywall lookups to persist open-access PDFs.


   .. py:attribute:: ua


   .. py:attribute:: email


   .. py:attribute:: openalex
      :value: ''



   .. py:attribute:: unpaywall
      :value: ''



   .. py:attribute:: pdf_host
      :value: ''



   .. py:attribute:: out_dir
      :value: '/data/pdfs'



   .. py:attribute:: session


   .. py:method:: search(topic, years, max_works)

      Search OpenAlex for works matching the provided topic and year window.

      :param topic: OpenAlex topic identifier or free-form search term.
      :type topic: str
      :param years: Publication-year filter expressed in the OpenAlex filter syntax.
      :type years: str
      :param max_works: Maximum number of works to retrieve.
      :type max_works: int

      :returns: Work payloads returned by the OpenAlex API.
      :rtype: list[dict[str, Any]]



   .. py:method:: resolve_pdf(work)

      Resolve a PDF URL for an OpenAlex work using API metadata and fallbacks.

      :param work: Work record returned from :meth:`search`.
      :type work: dict[str, Any]

      :returns: Direct PDF URL if one can be resolved; otherwise ``None``.
      :rtype: str | None



   .. py:method:: download_pdf(url, target_path)

      Download a PDF to the given path and validate the content type.

      :param url: Direct URL to the PDF.
      :type url: str
      :param target_path: Absolute path on disk where the PDF should be written.
      :type target_path: str

      :returns: Path to the stored PDF.
      :rtype: str

      :raises kgfoundry_common.errors.DownloadError: Raised when the response code indicates a failure.
      :raises kgfoundry_common.errors.UnsupportedMIMEError: Raised when the response is not a PDF-like MIME type.



   .. py:method:: run(topic, years, max_works)

      Harvest PDFs for matching works and build :class:`Doc` records.

      :param topic: Topic identifier or search term forwarded to :meth:`search`.
      :type topic: str
      :param years: Publication-year filter string forwarded to :meth:`search`.
      :type years: str
      :param max_works: Maximum number of works to process.
      :type max_works: int

      :returns: Documents referencing the downloaded PDFs.
      :rtype: list[Doc]



