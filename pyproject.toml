[build-system]
requires = ["hatchling>=1.24"]
build-backend = "hatchling.build"

[project]
name = "kgfoundry"
version = "0.1.0"
description = "kgfoundry"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    # ============================================================================
    # HTTP & Networking
    # ============================================================================
    "httpx>=0.28.1",
    "hishel>=0.1.0",
    "certifi>=2025.10.5",
    "pyrate-limiter>=3.9",
    "url-normalize>=2.2.0",
    "uvicorn>=0.38.0",
    "fastapi>=0.115.0",
    # ============================================================================
    # Data Processing & Storage
    # ============================================================================
    "pyarrow>=21.0.0",
    "numpy>=2.2.6",
    "jsonlines>=4.0.0",
    "libarchive-c>=5.3",
    # ============================================================================
    # Pydantic Ecosystem
    # ============================================================================
    "pydantic>=2.0",
    "pydantic-core>=2.41.4",
    "pydantic-settings>=2.11.0",
    # ============================================================================
    # Document Processing
    # ============================================================================
    "docling-core>=2.48.4",
    # ============================================================================
    # Domain-Specific APIs
    # ============================================================================
    "pyalex>=0.18",
    "waybackpy>=3.0.6",
    # ============================================================================
    # Ontology & Knowledge Graphs
    # ============================================================================
    "bioregistry>=0.12.43",
    "arelle>=2.2",
    "rdflib>=7.2.1",
    # ============================================================================
    # Web Scraping
    # ============================================================================
    "trafilatura>=2.0.0",
    "beautifulsoup4>=4.14.2",
    # ============================================================================
    # ML/Embeddings (lazy imports - consider making optional)
    # ============================================================================
    "transformers>=4.57.1",
    "lupyne",
    # ============================================================================
    # Observability & Reliability
    # ============================================================================
    "prometheus-client>=0.23.1",
    "tenacity>=9.1.2",
    "pybreaker",
    # ============================================================================
    # CLI & User Experience
    # ============================================================================
    "typer>=0.19.2",
    "rich>=14.2.0",
    "tqdm>=4.67.1",
    "mypy>=1.11.0",
    "mypy-extensions>=1.0.0",
    "black[jupyter]>=25.9.0",
    "ruff>=0.14.2",
    "prefect>=3.4.25",
    # ============================================================================
    # Type Stubs
    # ============================================================================
    "types-aiofiles",
    "types-annoy",
    "types-antlr4-python3-runtime",
    "types-appdirs",
    "types-assertpy",
    "types-atheris",
    "types-atomicwrites",
    "types-attrs",
    "types-auth0-python",
    "types-Authlib",
    "types-aws-xray-sdk",
    "types-babel",
    "types-backports",
    "types-backports_abc",
    "types-backports.ssl_match_hostname",
    "types-beautifulsoup4",
    "types-binaryornot",
    "types-bleach",
    "types-boltons",
    "types-boto",
    "types-braintree",
    "types-cachetools",
    "types-caldav",
    "types-capturer",
    "types-certifi",
    "types-cffi",
    "types-channels",
    "types-characteristic",
    "types-chardet",
    "types-chevron",
    "types-click",
    "types-click-default-group",
    "types-click-log",
    "types-click-shell",
    "types-click-spinner",
    "types-click-web",
    "types-colorama",
    "types-commonmark",
    "types-console-menu",
    "types-contextvars",
    "types-convertdate",
    "types-corus",
    "types-croniter",
    "types-cryptography",
    "types-D3DShot",
    "types-dataclasses",
    "types-dateparser",
    "types-DateTimeRange",
    "types-decorator",
    "types-defusedxml",
    "types-Deprecated",
    "types-dirhash",
    "types-dj-database-url",
    "types-django-filter",
    "types-django-import-export",
    "types-docker",
    "types-dockerfile-parse",
    "types-docopt",
    "types-docutils",
    "types-editdistance",
    "types-emoji",
    "types-entrypoints",
    "types-enum34",
    "types-ExifRead",
    "types-fanstatic",
    "types-fb303",
    "types-filelock",
    "types-first",
    "types-flake8",
    "types-flake8-2020",
    "types-flake8-bugbear",
    "types-flake8-builtins",
    "types-flake8-docstrings",
    "types-flake8-plugin-utils",
    "types-flake8-rst-docstrings",
    "types-flake8-simplify",
    "types-flake8-typing-imports",
    "types-Flask",
    "types-Flask-Cors",
    "types-Flask-Migrate",
    "types-Flask-SocketIO",
    "types-fpdf2",
    "types-freezegun",
    "types-frozendict",
    "types-futures",
    "types-gdb",
    "types-geoip2",
    "types-geopandas",
    "types-gevent",
    "types-google-cloud-ndb",
    "types-greenlet",
    "types-grpcio",
    "types-grpcio-channelz",
    "types-grpcio-health-checking",
    "types-grpcio-reflection",
    "types-grpcio-status",
    "types-gunicorn",
    "types-hdbcli",
    "types-hnswlib",
    "types-html5lib",
    "types-httplib2",
    "types-humanfriendly",
    "types-hvac",
    "types-ibm-db",
    "types-icalendar",
    "types-influxdb-client",
    "types-inifile",
    "types-invoke",
    "types-ipaddress",
    "types-itsdangerous",
    "types-JACK-Client",
    "types-Jetson.GPIO",
    "types-Jinja2",
    "types-jmespath",
    "types-jsonnet",
    "types-jsonschema>=4.25.1.20251009",
    "types-jwcrypto",
    "types-jwt",
    "types-kazoo",
    "types-keyboard",
    "types-ldap3",
    "types-libsass",
    "types-lunardate",
    "types-lupa",
    "types-lzstring",
    "types-m3u8",
    "types-Markdown",
    "types-MarkupSafe",
    "types-maxminddb",
    "types-mock",
    "types-mypy-extensions",
    "types-mysqlclient",
    "types-nanoid",
    "types-nanoleafapi",
    "types-netaddr",
    "types-netifaces",
    "types-networkx",
    "types-nmap",
    "types-oauthlib",
    "types-objgraph",
    "types-olefile",
    "types-openpyxl",
    "types-openssl-python",
    "types-opentracing",
    "types-orjson",
    "types-paho-mqtt",
    "types-paramiko",
    "types-parsimonious",
    "types-passlib",
    "types-passpy",
    "types-pathlib2",
    "types-peewee",
    "types-pep8-naming",
    "types-pexpect",
    "types-pika",
    "types-Pillow",
    "types-playsound",
    "types-pluggy",
    "types-polib",
    "types-pony",
    "types-portpicker",
    "types-prettytable",
    "types-protobuf",
    "types-psutil",
    "types-psycopg2",
    "types-pyasn1",
    "types-pyaudio",
    "types-PyAutoGUI",
    "types-pycocotools",
    "types-pycurl",
    "types-pyfarmhash",
    "types-pyflakes",
    "types-pygit2",
    "types-Pygments",
    "types-pyinstaller",
    "types-pyjks",
    "types-PyJWT",
    "types-pyluach",
    "types-PyMeeus",
    "types-pymssql",
    "types-PyMySQL",
    "types-pynput",
    "types-pyOpenSSL",
    "types-pyperclip",
    "types-pyRFC3339",
    "types-PyScreeze",
    "types-pyserial",
    "types-pysftp",
    "types-PySocks",
    "types-pytest-lazy-fixture",
    "types-python-crontab",
    "types-python-datemath",
    "types-python-dateutil",
    "types-python-gflags",
    "types-python-http-client",
    "types-python-jenkins",
    "types-python-jose",
    "types-python-nmap",
    "types-python-slugify",
    "types-python-xlib",
    "types-pytz",
    "types-pyvmomi",
    "types-pywin32",
    "types-pyxdg",
    "types-PyYAML>=6.0.12.20240917",
    "types-qrbill",
    "types-qrcode",
    "types-ratelimit",
    "types-redis",
    "types-regex",
    "types-reportlab",
    "types-requests>=2.32.0.20241016",
    "types-requests-oauthlib",
    "types-retry",
    "types-rfc3339-validator",
    "types-Routes",
    "types-RPi.GPIO",
    "types-s2clientprotocol",
    "types-scribe",
    "types-seaborn",
    "types-selenium",
    "types-Send2Trash",
    "types-setuptools",
    "types-shapely",
    "types-simplejson",
    "types-singledispatch",
    "types-six",
    "types-slumber",
    "types-stdlib-list",
    "types-str2bool",
    "types-stripe",
    "types-tabulate",
    "types-tensorflow",
    "types-termcolor",
    "types-TgCrypto",
    "types-toml",
    "types-toposort",
    "types-tornado",
    "types-tqdm",
    "types-translationstring",
    "types-tree-sitter",
    "types-tree-sitter-languages",
    "types-ttkthemes",
    "types-typed-ast",
    "types-tzlocal",
    "types-ujson",
    "types-unidiff",
    "types-untangle",
    "types-urllib3",
    "types-usersettings",
    "types-uWSGI",
    "types-vobject",
    "types-waitress",
    "types-watchpoints",
    "types-WebOb",
    "types-Werkzeug",
    "types-whatthepatch",
    "types-workalendar",
    "types-WTForms",
    "types-wurlitzer",
    "types-www-authenticate",
    "types-xdgenvpy",
    "types-xlrd",
    "types-xmldiff",
    "types-xmltodict",
    "types-xxhash",
    "types-yt-dlp",
    "types-zstd",
    "types-zxcvbn",
    # ============================================================================
    # Utilities
    # ============================================================================
    "filelock>=3.20.0",
    "platformdirs>=4.5.0",
    "typing-extensions>=4.15.0",
    "pyyaml>=6",
    "jsonschema>=4.25.1",
    "pyrefly",
    "docstring-parser",
    # ============================================================================
    # Testing Framework (if tests are in src/)
    # ============================================================================
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-logging>=2015.11.4",
    "hypothesis>=6.141.0",
    "requests>=2.32.5",
    "psutil>=7.1.0",
    # ============================================================================
    # Cloud & Databases
    # ============================================================================
    "boto3", # for AWS S3 storage
    "psycopg>=3", # for PostgreSQL
    "psycopg-pool", # for PostgreSQL connection pooling
    "sqlalchemy>=2.0.44", # for PostgreSQL via ORM
    "redis>=6.4.0", # for Redis caching
    # ============================================================================
    # Advanced Analytics
    # ============================================================================
    "polars",
    "duckdb>=1.4.1",
    # ============================================================================
    # Documentation
    # ============================================================================
    "sphinx>=8.2.3",
    "myst-parser[linkify]>=3.0.1",
    "pydata-sphinx-theme>=0.15.4",
    "sphinx-sitemap>=2.6.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.5.0",
    "sphinx-autoapi>=3.3.0",
    "astroid>=4.0.0",
    "sphinx-autobuild>=2024.4.3",
    "sphinx-autodoc-typehints>=1.27.0",
    "sphinxext-opengraph[social-cards]>=0.13.0",
    "sphinx-notfound-page>=1.1.0",
    "sphinxext-rediraffe>=0.3.0",
    "sphinx-codeautolink>=0.17.5",
    "autodoc-pydantic>=2.0.0",
    "myst-nb>=1.3.0",
    "sphinxcontrib-mermaid>=0.7.1",
    "sphinx-issues>=5.0.1",
    "sphinxcontrib-spelling>=7.7.0",
    "numpydoc>=1.7.0",
    "pyenchant>=3.3.0",
    "linkify-it-py>=2.0.3",
    "sphinxcontrib-typer>=0.6.2",
    "nbsphinx>=0.9.1",
    "nbformat>=5.10.2",
    "ipykernel>=6.29.5",
    "ipywidgets>=8.1.1",
    "sphinx-favicon>=0.2.0",
    "sphinx-inline-tabs>=0.3.0",
    "sphobjinv>=2.3.1.3",
    "graphviz>=0.21",
    "pydeps>=1.12.20",
    "pylint>=3.2.0",
    "sphinx-gallery>=0.17.1",
    "xdoctest>=1.1.4",
    "pandera>=0.20.0",
    "griffe",
    "jinja2>=3.1.4",
    "libcst>=1.4.0",
    "doq", # generate docstring skeletons
    "pyment", # fill/convert to preferred style (Google/NumPy/reST)
    "interrogate", # enforce docstring coverage
    "pydoclint>=0.4.0", # enforce numpy-style parameter/return parity
    "pydocstyle", # PEP-257 lint
    "docformatter", # format docstrings
    "import-linter", # enforce layered architecture
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
    "numpydoc-validation",
    "pydot",
    "networkx",
    "pytest-doctestplus",
    "griffe2md",
    "scipy-doctest",
    "mkdocs-llmstxt",
    "jpype1>=1.6.0",
    "myst-parser",
    "faiss-cpu",
]

[project.scripts]
catalogctl = "kgfoundry.agent_catalog.cli:main"
catalogctl-mcp = "kgfoundry.agent_catalog.mcp:main"


[project.optional-dependencies]
gpu = [
    "cython>=3.2.0b1",
    "nvidia-cublas",
    "nvidia-cuda-cupti",
    "nvidia-cuda-nvrtc",
    "nvidia-cuda-runtime",
    "nvidia-cudnn-cu13",
    "nvidia-cudnn-frontend",
    "nvidia-cufft",
    "nvidia-cufile",
    "nvidia-curand",
    "nvidia-cusolver",
    "nvidia-cusparse",
    "nvidia-cusparselt-cu13",
    "nvidia-cutlass-dsl",
    "nvidia-ml-py",
    "nvidia-nccl-cu13",
    "nvidia-nvjitlink",
    "nvidia-nvshmem-cu13",
    "nvidia-nvtx",
    "cuda-bindings",
    "cuda-pathfinder",
    "cuda-python",
    "cuda-toolkit",
    "pylibraft-cu13",
    "rmm-cu13",
    "torch",
    "torchvision",
    "torchaudio",
    "flashinfer-cubin",
    "apache-tvm-ffi",
    "flashinfer-python",
    "compressed-tensors",
    "accelerate",
    "easyocr",
    "libcuvs-cu13",
    "libraft-cu13",
    "librmm-cu13",
    "cuvs-cu13",
    "docling",
    "docling-ibm-models",
    "openai",
    "openai-harmony",
    "openai-whisper",
    "pyserini>=1.2.0",
    "transformers",
    "sentence-transformers",
    "keybert",
    "stanza",
    "xgrammar",
    "safetensors",
    "triton",
    "triton-kernels @git+https://github.com/triton-lang/triton.git@v3.5.0#subdirectory=python/triton_kernels",
    "xformers",
    "vllm==0.11.0",
    "faiss==1.12.0 ; python_version >= '3.13' and python_version < '3.14' and platform_system == 'Linux' and platform_machine == 'x86_64'",
    "ray",
]


[tool.hatch.build.targets.wheel]
packages = ["src/kgfoundry"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
line-length = 100
target-version = ["py312"]  # black currently supports up to py312; code runs on py313

[tool.ruff]
line-length = 100
target-version = "py313"
required-version = ">=0.14.2"
output-format = "grouped"
src = ["src"]
extend-exclude = [
    "docs/_build/**",
    "site/**",
    "src/kgfoundry.egg-info/**",
    "kgfoundry.egg-info/**",
    "faiss/**",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",
    "E4",
    "E7",
    "E9",
    "I",
    "N",
    "UP",
    "SIM",
    "C4",
    "B",
    "RUF",
    "ANN",
    "D",
    "RET",
    "RSE",
    "TRY",
    "EM",
    "G",
    "LOG",
    "ISC",
    "TID",
    "ICN",
    "TD",
    "ERA",
    "PGH",
    "C90",
    "PLR",
    "W",
    "A",
    "ARG",
    "BLE",
    "DTZ",
    "PTH",
    "PIE",
    "S",
    "PT",
    "T20",
    "PLW",
    "PLC",
]
ignore = ["Q", "E203", "D203", "D213", "D205"]
preview = false
extend-select = ["RUF100", "D401", "D417"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-branches = 12
max-returns = 6

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "pydantic_settings.BaseSettings",
    "typing.TypedDict",
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "ANN001",
    "ANN201",
    "PLR2004",
    "N806",
    "C401",
    "S101",
    "T20",
]
"**/*.pyi" = ["PIE790"]  # Stub files require ... literals
"tools/check_new_suppressions.py" = ["T201", "BLE001", "SIM102", "PLR2004"]  # CLI script: print is OK, Exception catch for file I/O
"tools/generate_pr_summary.py" = ["T201", "BLE001", "C901", "PLR0915", "TRY300", "SIM115"]  # CLI script: print is OK, complexity acceptable
"src/search_api/bm25_index.py" = ["S608"]  # DuckDB read_parquet() paths from trusted sources (DB queries/config), not user input

[tool.ruff.lint.isort]
known-first-party = [
    "docling",
    "download",
    "embeddings_dense",
    "embeddings_sparse",
    "kgfoundry",
    "kg_builder",
    "kgfoundry_common",
    "linking",
    "observability",
    "ontology",
    "orchestration",
    "registry",
    "search_api",
    "search_client",
    "vectorstore_faiss",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-import-conventions.aliases]
numpy = "np"
pandas = "pd"
"matplotlib.pyplot" = "plt"

[tool.docs.extensions]
enabled = [
    "myst_parser",
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.napoleon",
    "sphinx.ext.intersphinx",
    "sphinx.ext.viewcode",
    "sphinx.ext.linkcode",
    "sphinx.ext.autosectionlabel",
    "sphinx.ext.githubpages",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx_sitemap",
    "sphinx_copybutton",
    "sphinx_design",
    "autoapi.extension",
    "sphinxext.opengraph",
    "notfound.extension",
    "sphinxext.rediraffe",
    "sphinx_codeautolink",
    "sphinxcontrib.autodoc_pydantic",
    "sphinx_issues",
    "sphinxcontrib.spelling",
    "sphinx.ext.graphviz",
    "sphinx.ext.inheritance_diagram",
    "sphinxcontrib.mermaid",
    "numpydoc-validation",
]
optional = [
    "myst_nb",
]

[tool.pytest.ini_options]
markers = [
    "real_vectors: tests that require the real-vector fixture (enable with --real-vectors)",
    "scale_vectors: tests that require the large real-vector fixture (enable with --scale-vectors)",
    "integration: marks integration tests that may hit real network services",
    "benchmark: performance benchmarks requiring pytest-benchmark",
    "gpu: requires the optional 'gpu' stack (extra: gpu) and a CUDA-capable runtime",
    "requires(*mods, modules=None): import-or-skip listed modules and auto-mark GPU suites",
]
testpaths = ["tests"]

# Tell uv that vllm should come ONLY from the vllm-nightly index.
[tool.uv.sources]
#vllm = { index = "vllm-nightly" }
faiss = { index = "wheelhouse" }
#xformers = { index = "wheelhouse" }

# point torch packages to the *named* PyTorch cu130 index
torch = [       { index = "pytorch-cu130" } ]
torchvision = [ { index = "pytorch-cu130" } ]
torchaudio = [  { index = "pytorch-cu130" } ]


# Define named indexes uv can use.
#[[tool.uv.index]]
#name = "vllm-nightly"
#url = "https://wheels.vllm.ai/nightly"
#explicit = true          # prevents accidental installs of other deps from here

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"

[[tool.uv.index]]
name = "nvidia"
url = "https://pypi.nvidia.com/simple"
default = true

# Tell uv there's a local, flat index of wheels.
[[tool.uv.index]]
name = "wheelhouse"
url = ".wheelhouse"
format = "flat"
explicit = true

# NEW — define the cu130 index *by name*, then reference it above
[[tool.uv.index]]
name = "pytorch-cu130"
url  = "https://download.pytorch.org/whl/cu129"
explicit = true


[tool.uv]
# Allow pre-releases in resolution so uv can select dev/nightly builds of vLLM.
# (Default behavior is "if-necessary-or-explicit"; "allow" is simplest here.)
prerelease = "allow"


[tool.uv.pip]
find-links = ["./.wheelhouse"]
emit-index-annotation = true
emit-index-url        = true
emit-build-options    = true  # include only/no-binary flags if you use them


[tool.pydocstyle]
convention = "numpy"
add-ignore = [
    "D200",
    "D202",
    "D204",
    "D205",
    "D209",
    "D400",
    "D401",
]

[tool.kgfoundry.docstrings.policy]
coverage-threshold = 0.9
coverage-action = "error"
missing-params-action = "error"
missing-returns-action = "error"
require-parameters = true
require-returns = true

[dependency-groups]
dev = [
    "libcst>=1.8.5",
]
