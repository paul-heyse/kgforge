"""Typed models for documentation pipeline outputs.

This module defines typed dataclasses and protocols for analytics, graphs,
test maps, and other documentation artifacts.
"""

from __future__ import annotations

from dataclasses import dataclass, field
from typing import Any

__all__ = [
    "AnalyticsPayload",
    "GraphManifest",
    "TestMapEntry",
    "TestMapPayload",
]


@dataclass(frozen=True)
class AnalyticsPayload:
    """Machine-readable analytics summary emitted by build_agent_analytics.py."""

    generated_at: str
    version: str
    counts: dict[str, int]
    packages: list[str]
    modules: list[str]
    symbols: int
    coverage: dict[str, float] | None = None


@dataclass(frozen=True)
class GraphManifest:
    """Manifest describing graph artifacts generated by build_graphs.py."""

    generated_at: str
    version: str
    packages: list[str]
    artifacts: dict[str, str]
    cache_hit: bool = False
    errors: list[str] = field(default_factory=list)


@dataclass(frozen=True)
class TestMapEntry:
    """Single test map entry mapping symbols to test files."""

    symbol: str
    test_files: list[str]
    coverage: float | None = None
    context_windows: list[dict[str, Any]] = field(default_factory=list)


@dataclass(frozen=True)
class TestMapPayload:
    """Complete test map payload emitted by build_test_map.py."""

    generated_at: str
    version: str
    entries: list[TestMapEntry]
    coverage_summary: dict[str, float] | None = None
    lint_summary: dict[str, Any] | None = None
