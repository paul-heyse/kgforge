{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://kgfoundry.dev/schema/search/search_response.json",
  "title": "AgentSearchResponse",
  "description": "HTTP response envelope for agent catalog search operations. Includes search results, metadata, and performance metrics. Errors return RFC 9457 Problem Details.",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "results",
    "total",
    "took_ms",
    "metadata"
  ],
  "properties": {
    "results": {
      "description": "List of search results, sorted by score descending.",
      "type": "array",
      "items": {
        "$ref": "#/$defs/VectorSearchResult"
      },
      "minItems": 0
    },
    "total": {
      "description": "Total number of results (may exceed len(results) if truncated).",
      "type": "integer",
      "minimum": 0
    },
    "took_ms": {
      "description": "Query execution time in milliseconds.",
      "type": "integer",
      "minimum": 0
    },
    "metadata": {
      "description": "Response metadata (alpha, backend, query_info, etc.).",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "alpha": {
          "description": "Hybrid search mixing parameter (0.0 = lexical only, 1.0 = vector only).",
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "backend": {
          "description": "Search backend used (e.g., 'faiss', 'bm25', 'splade').",
          "type": "string"
        },
        "query_info": {
          "description": "Query parsing and normalization metadata.",
          "type": "object",
          "additionalProperties": true
        }
      }
    }
  },
  "$defs": {
    "VectorSearchResult": {
      "description": "Single search result entry with symbol metadata and scores.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "symbol_id",
        "score",
        "lexical_score",
        "vector_score",
        "package",
        "module",
        "qname",
        "kind",
        "anchor",
        "metadata"
      ],
      "properties": {
        "symbol_id": {
          "description": "Fully qualified symbol identifier (e.g., 'py:module.Class.method').",
          "type": "string",
          "pattern": "^py:[a-zA-Z0-9_.]+$"
        },
        "score": {
          "description": "Final relevance score combining lexical and vector signals.",
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "lexical_score": {
          "description": "BM25 lexical search score (0.0 to 1.0).",
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "vector_score": {
          "description": "Vector similarity score from dense/sparse search (0.0 to 1.0).",
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "package": {
          "description": "Package name containing the symbol.",
          "type": "string",
          "minLength": 1
        },
        "module": {
          "description": "Module name containing the symbol.",
          "type": "string",
          "minLength": 1
        },
        "qname": {
          "description": "Qualified name of the symbol within its module.",
          "type": "string",
          "minLength": 1
        },
        "kind": {
          "description": "Symbol kind (e.g., 'class', 'function', 'module').",
          "type": "string",
          "enum": ["class", "function", "module", "method", "property", "attribute", "type", "protocol"]
        },
        "anchor": {
          "description": "Source anchor metadata (start_line, end_line, etc.).",
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {"type": "integer"},
              {"type": "null"}
            ]
          },
          "properties": {
            "start_line": {
              "description": "Starting line number (1-indexed).",
              "type": ["integer", "null"],
              "minimum": 1
            },
            "end_line": {
              "description": "Ending line number (1-indexed).",
              "type": ["integer", "null"],
              "minimum": 1
            }
          }
        },
        "metadata": {
          "description": "Additional metadata (stability, deprecated, summary, etc.).",
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "stability": {
              "description": "API stability level (e.g., 'stable', 'experimental', 'deprecated').",
              "type": ["string", "null"],
              "enum": ["stable", "experimental", "deprecated", null]
            },
            "deprecated": {
              "description": "Whether the symbol is deprecated.",
              "type": ["boolean", "null"]
            },
            "summary": {
              "description": "One-line summary from docstring.",
              "type": ["string", "null"]
            }
          }
        }
      }
    }
  },
  "examples": [
    {
      "results": [
        {
          "symbol_id": "py:search_api.types.FaissIndexProtocol",
          "score": 0.95,
          "lexical_score": 0.8,
          "vector_score": 0.9,
          "package": "search_api",
          "module": "types",
          "qname": "FaissIndexProtocol",
          "kind": "protocol",
          "anchor": {
            "start_line": 78,
            "end_line": 156
          },
          "metadata": {
            "stability": "stable",
            "deprecated": false,
            "summary": "Protocol for FAISS-compatible vector indexes."
          }
        }
      ],
      "total": 1,
      "took_ms": 42,
      "metadata": {
        "alpha": 0.7,
        "backend": "faiss",
        "query_info": {
          "query": "vector store",
          "k": 10
        }
      }
    }
  ]
}

